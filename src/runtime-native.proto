;;;
;;; NATIVE RUNTIME ONLY
;;;

(dv %list list) ;; QUASIQUOTE SUPPORT -- FOR EMULATOR P2C
(dv %cat  cat)

(dm sym-name ((x <sym>) => <str>) 
  (%sym-nam x))

(df address-of (x => <int>)
  ;; treat pointer as integer
  (%ib x))

;;;
;;; ASCII -- S48
;;;

(dv ascii-limit 128)

(dv (ascii-chars <vec>)
  (let ((ascii-chars
	 (fill (fab <vec> ascii-limit) #f))
	(init
	 (fun (i s)
	   (rep loop ((i i) (j 0))
	     (unless (= j (len s))
	       (set (elt ascii-chars i) (elt s j))
	       (loop (+ i 1) (+ j 1)))))))
    (init 9 "\t")  ;; tab
    (init 10 "\n") ;; newline
    (init 12 "\f") ;; page
    (init 13 "\r") ;; carriage return
    (init 32 " !\"#$%&'()*+,-./0123456789:;<=>?")
    (init 64 "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_")
    (init 96 "`abcdefghijklmnopqrstuvwxyz{|}~")
    ascii-chars))

(dm ascii->char ((n <int>) => <chr>)
  (or (elt ascii-chars n)
      (error "not a standard character's ASCII code: %=" n)))

(dm char->integer ((char <chr>) => <int>)
  (as <int> char))

(dm integer->char ((n <int>) => <chr>)
  (as <chr> n))

(dv (native-chars <lst>)
  (let ((end259 (len ascii-chars)))
    (rep loop ((i 0) (least #f) (greatest #f))
      (if (= i end259)
	  (let ((v (fill (fab <vec> (+ (- greatest least) 1)) #f)))
	    (rep loop ((i 0))
	      (if (= i end259)
		  (lst least v)
		  (let ((c (elt ascii-chars i)))
		    (if c (set (elt v (- (char->integer c) least)) i))
		    (loop (+ i 1))))))
	  (let ((c (elt ascii-chars i)))
	    (if c
		(let ((n (char->integer c)))
		  (loop (+ i 1) (if least (min least n) n)
			(if greatest (max greatest n) n)))
		(loop (+ i 1) least greatest)))))))

(dm char->ascii ((char <chr>) => <int>)
  (or (elt (head (tail native-chars))
	   (- (char->integer char) (head native-chars)))
      (error "not a standard character: %=" char)))

(dv ascii-whitespaces '(32 10 9 12 13))

;;;
;;; TABLES
;;;

;;; Simple hash-table implementation

;; Is 1 million big enough?
;; (dv *max-prime-for-table* 1000000)
;; 
;; List of the first number in each prime pair
;; (dv *twin-primes* (compute-twin-primes *max-prime-for-table*))

(dv *twin-primes*
  (as <vec>
    '(3 5 11 17 29 41 47 59 71 101 107 137 149 167 179 191 197 227 239
      269 281 311 347 419 431 461 521 569 599 617 641 659 809 839 881 1019
      1049 1091 1151 1229 1277 1319 1367 1427 1481 1607 1667 1721 1787 1871
      1931 1997 2081 2141 2207 2267 2339 2549 2657 2729 2801 2969 3119 3251
      3359 3461 3557 3671 3767 3917 4019 4127 4241 4421 4547 4721 4931 5099
      5231 5417 5639 5849 6089 6269 6449 6659 6827 7127 7307 7547 7757 8009
      8219 8429 8819 9041 9281 9629 9929 10271 10529 10859 11159 11447
      11777 12107 12539 12917 13337 13679 14081 14447 14867 15269 15731
      16139 16631 17189 17657 18119 18911 19421 19961 20477 21011 21557
      22109 22697 23291 23909 24917 25577 26249 26951 27689 28409 29129
      29879 30839 31721 32531 33347 34211 35081 36011 36929 37991 39041
      40037 41141 42179 43319 44531 45821 47057 48311 49529 50891 52181
      53549 54917 56477 57899 59357 60887 62927 64577 66359 68111 69827
      71711 73607 75539 77477 79559 81551 83639 85817 88001 90371 92639
      95087 97499 99989 102497 105227 108011 110729 113537 116531 119549
      122597 125789 128939 132329 135647 139121 142607 146297 149969 153887
      157769 161729 166301 170537 174929 179381 183917 188831 193601 198461
      203429 208589 213947 219311 224909 230561 236477 242447 248639 254927
      261431 268517 275321 282239 289841 297467 304979 312617 320561 328589
      336827 345461 354251 363149 372269 381629 391217 401309 411527 422087
      432659 443561 454709 466181 478067 490031 502499 515087 527981 541361
      555041 569081 583337 598049 613007 628679 644489 660617 677231 694259
      711707 729557 747827 766541 785777 805499 825827 846749 868121 889871
      912449 935591 959207 983327)))

;;;
;;; SIMPLE-TABLE-VECTOR
;;;

(dv <simple-table-vector> (isa <any>))
  ;; Number of filled and vacant elements
  (slot <simple-table-vector> (%vacated <int>) 0)
  ;; Modulus values for primary and secondary hash
  (slot <simple-table-vector> (%primary-modulus <int>))
  (slot <simple-table-vector> (%secondary-modulus <int>))
  ;; Number of buckets and number of elements in each bucket
  (slot <simple-table-vector> (%n-buckets <int>))
  (slot <simple-table-vector> (%bucket-depth <int>))
  ;; The actual table data representation
  (slot <simple-table-vector> (%data <vec>))
  ;; GC state
  (slot <simple-table-vector> %gc-state)

;; TODO: SIZE FILL N-BUCKETS BUCKET-DEPTH PRIMARY-MODULUS SECONDARY-MODULUS
(df fab-table-vector 
     ((size <int>) fill-value
      (n-buckets <int>) (bucket-depth <int>)
      (primary-modulus <int>) (secondary-modulus <int>)
      => <simple-table-vector>)
   (let ((v (isa <simple-table-vector>
	      (set %n-buckets n-buckets)
	      (set %bucket-depth bucket-depth)
	      (set %primary-modulus primary-modulus)
	      (set %secondary-modulus secondary-modulus))))
      (set (%data v) (fill (fab <vec> size) fill-value))
      v))

(dm elt ((vector <simple-table-vector>) (index <int>) => <any>)
  ;; (elt (%data vector) index)
  (%velt (%data vector) (%iu index)))

(dm elt-setter (new-value (vector <simple-table-vector>) (index <int>) => <any>)
  ;; (set (elt (%data vector) index) new-value)
  (set (%velt (%data vector) (%iu index)) new-value)
  )

(dm clr! ((vector <simple-table-vector>) fill-value)
  (fill (%data vector) fill-value)
  (set (%vacated vector) 0))

;;;
;;; SIMPLE-TABLE
;;;

(dv *debug-tables?* #f)

(df trace (port msg (args ...))
  (and *debug-tables?* (apply format (cat (lst port msg) args))))
      

(dv <tab> (isa <map>))
  ;; Factor to grow by
  (slot <tab> (table-growth-factor <flo>) 2.0)
  ;; When to grow or shrink (percentage of table size)
  (slot <tab> (table-growth-threshold <flo>) 0.8)
  (slot <tab> (table-shrink-threshold <flo>) 0.5)
  (slot <tab> (%count <int>) 0)
  (slot <tab> (%vector <simple-table-vector>))

(dg table-protocol ((x <tab>) => (tup (test-fun <fun>) (hash-fun <fun>))))

(dm table-protocol ((x <tab>) => (tup (test-fun <fun>) (hash-fun <fun>)))
  (tup == id-hash))

(dv $empty-cell-marker (lst "empty cell"))
(dv $vacated-cell-marker (lst "vacated cell"))

(df hash-moduli ((hash <int>) (primary <int>) (secondary <int>)
		 => (tup (index <int>) (offset <int>)))
   (tup (modulo hash primary) (+ (modulo hash secondary) 1)))

(dm fab ((type <tab>) (size <int>) => <tab>)
  ;; (trace out "FAB %= SIZE %=\n" type size)
  (let (((tup n-buckets bucket-depth) (choose-table-geometry size))
	(table (isa type)))
    (set (%vector table)
	 (fab-table-vector 
	  (* n-buckets (* bucket-depth 2)) $empty-cell-marker
	  n-buckets bucket-depth
	  n-buckets (- n-buckets 2)))
    table))

(ds (with-hash ((tup ,bucket-index ,bucket-offset) (,table ,key)) ,@body)
  `(let (((tup test-function hash-function) (table-protocol ,table))
	 ((tup (hash <int>) state) (hash-function ,key))
	  (vector (%vector table))
         ((tup ,bucket-index ,bucket-offset)
	   (hash-moduli 
	    hash (%primary-modulus vector) (%secondary-modulus vector))))
     ,@body))

(dm elt ((table <tab>) key => <any>)
  (lab return
    (let (((tup test-function hash-function) (table-protocol table))
	  ((tup (hash <int>) state) (hash-function key))
	  (vector       (%vector table))
	  (n-buckets    (%n-buckets vector))
	  (bucket-depth (%bucket-depth vector))
	  ((tup bucket-index bucket-offset)
	   (hash-moduli 
	    hash (%primary-modulus vector) (%secondary-modulus vector))))
      ;; Search each bucket
      (rep outer ((probes 0))
	(when (< probes n-buckets)
	  (let ((index (* bucket-index (* bucket-depth 2))))
	    (rep inner ((i 0) (this-bucket-raw-index index))
	      (when (< i bucket-depth)
		(let ((this-key (elt vector this-bucket-raw-index)))
		  (when (== this-key $empty-cell-marker)
		    (return nul))
		  ;; N.B. Don't look at already vacated cells along
		  ;; the collision chain 
		  (when (and ;; (~== this-key $vacated-cell-marker)
			     (test-function key this-key))
		    (return
		     (elt vector (+ this-bucket-raw-index bucket-depth))))
		  (inner (+ i 1) (+ this-bucket-raw-index 1)))))
	    ;; Not in this bucket try the next one
	    (dec bucket-index bucket-offset)
	    (when (neg? bucket-index)
	      (inc bucket-index n-buckets))
	    (outer (+ probes 1)))))
      ;; Table totally full???  That's not right
      (error "The table is totally full this shouldn't happen"))))

(dm elt-setter (value (table <tab>) key => <any>)
  ;; (trace out "PUT COUNT %=\n" (%count table))
  (let ((vector (%vector table)))
    (if (> (%count table) 
	   (* (* (%n-buckets vector) (%bucket-depth vector))
	      (table-growth-threshold table)))
	;; Grow the table if it's too full
	(set vector (%vector (grow-table table)))
	(if (> (+ (%count table) (%vacated vector)) 
	       (* (* (%n-buckets vector) (%bucket-depth vector))
		  (table-growth-threshold table))) 
            ;; Rehash when there are too many vacated elements
	    (set vector (%vector (rehash-table table)))))
    (lab return
      (let (((tup test-function hash-function) (table-protocol table))
	    ((tup (hash <int>) state) (hash-function key))
	    (bucket-depth (%bucket-depth vector))
	    (n-buckets    (%n-buckets vector))
	    ((tup bucket-index bucket-offset)
	     (hash-moduli 
	      hash (%primary-modulus vector) (%secondary-modulus vector))))
	;; Search each bucket
	(rep outer (((probes <int>) 0))
	  (when (< probes n-buckets)
	    (let ((index (* bucket-index (* bucket-depth 2))))
	      ;; (trace out "LOOKING AT %=\n" index)
	      (rep inner (((i <int>) 0) ((this-bucket-raw-index <int>) index))
		(when (< i bucket-depth)
		  (let ((vacancy-index #f)
			(this-key (elt vector this-bucket-raw-index)))
		    (case
		      ;; end of chain and not found
		      ((== this-key $empty-cell-marker)
		       (let ((index 
			      (if vacancy-index
				  ;; use a vacant cell if you found one
				  (seq (dec (%vacated vector))
				       vacancy-index)
				  ;; use this cell
				  this-bucket-raw-index)))
			 ;; (trace out "FOUND EMPTY CELL @ %d\n"
			 ;; 	   this-bucket-raw-index)
			 (set (elt vector index) key)
			 (set (elt vector (+ index bucket-depth)) value)
			 (inc (%count table))
			 (return value)))
		      ((== this-key $vacated-cell-marker) ;; remember vacancy
		       ;; N.B. Only record the _first_ vacant cell
		       (unless vacancy-index 
			 ;; (trace out "FOUND VACATED CELL @ %d\n" vacancy-index)
			 (set vacancy-index this-bucket-raw-index)))
		      ;; key already in table update value
		      ((test-function key this-key)
		       (set (elt vector (+ this-bucket-raw-index bucket-depth))
			    value)
		       ;; (trace out "FOUND KEY @ %d\n" this-bucket-raw-index)
		       (return value)))
		   (inner (+ i 1) (+ this-bucket-raw-index 1)))))
	      ;; Not in this bucket try the next one
	      (dec bucket-index bucket-offset)
	      (when (neg? bucket-index)
		(inc bucket-index n-buckets))
	      (outer (+ probes 1)))))
	;; Table totally full???  That's not right
	(error "The table is totally full this shouldn't happen")))))

(dm del-key ((table <tab>) key => (found? <log>))
  (lab return
    (let (((tup test-function hash-function) (table-protocol table))
	  ((tup (hash <int>) state) (hash-function key))
	  (vector       (%vector table))
	  (n-buckets    (%n-buckets vector))
	  (bucket-depth (%bucket-depth vector))
	  ((tup bucket-index bucket-offset)
	   (hash-moduli
	    hash (%primary-modulus vector) (%secondary-modulus vector))))
      ;; Search each bucket
      (rep outer (((probes <int>) 0))
	(when (< probes n-buckets)
	  (let (((index <int>) (* bucket-index (* bucket-depth 2))))
	    ;; (trace out "LOOKING AT %=\n" index)
	    (rep inner (((i <int>) 0) ((this-bucket-raw-index <int>) index))
	      (when (< i bucket-depth)
		(let ((this-key (elt vector this-bucket-raw-index)))
		  (when (== this-key $empty-cell-marker)
		    (return #f))
		  ;; N.B. Don't look at already vacated cells along
		  ;;      the collision chain 
		  (when (and (~== this-key $vacated-cell-marker)
			     (test-function key this-key))
		    (set (elt vector this-bucket-raw-index)
			 $vacated-cell-marker)
		    ;; In a GC-ed environment clear the value cell too!
		    (dec (%count table))
		    (inc (%vacated vector))
		    (return #t))
		  (inner (+ i 1) (+ this-bucket-raw-index 1)))))
	    ;; Not in this bucket try the next one
	    (dec bucket-index bucket-offset)
	    (when (neg? bucket-index)
	      (inc bucket-index n-buckets))
	    (outer (+ probes 1)))))
      ;; Table totally full???  That's not right
      (error "The table is totally full this shouldn't happen"))))

(dm do-keyed ((function <fun>) (table <tab>) => <any>) ;; TODO: => (tup)
  (let ((vector    (%vector table))
	(n-buckets (%n-buckets vector))
	(depth     (%bucket-depth vector)))
    (rep outer (((b <int>) 0))
      (when (< b n-buckets)
	(rep inner (((i <int>) 0))
	  (when (< i depth)
	    (let ((key (elt vector (+ i (* b (* depth 2))))))
	      (unless (or (== key $empty-cell-marker) 
			  (== key $vacated-cell-marker))
		(trace out "B %= I %=\n" b i)
		(let ((index (+ i (+ (* b (* depth 2)) depth))))
		  (function key (elt vector index)))))
	    (inner (+ i 1))))
	(outer (+ b 1))))))

(dm do ((function <fun>) (table <tab>) => <any>) ;; TODO: => (tup)
  (let ((vector    (%vector table))
	(n-buckets (%n-buckets vector))
	(depth     (%bucket-depth vector)))
    (rep outer (((b <int>) 0))
      (when (< b n-buckets)
	(rep inner (((i <int>) 0))
	  (when (< i depth)
	    (let ((key (elt vector (+ i (* b (* depth 2))))))
	      (unless (or (== key $empty-cell-marker) 
			  (== key $vacated-cell-marker))
		(let ((index (+ i (+ (* b (* depth 2)) depth))))
		  (function (elt vector index)))))
	    (inner (+ i 1))))
	(outer (+ b 1))))))

(dm del-keys ((table <tab>) => <any>) ;; TODO: (tup)
  (clr! (%vector table) $empty-cell-marker)
  (set (%count table) 0))

(dm len ((table <tab>) => <int>)
  (%count table))

(dv <tab-state> (isa <any>))
  (slot <tab-state> (%vector <simple-table-vector>))
  (slot <tab-state> (%bucket <int>) 0)
  (slot <tab-state> (%index <int>) 0)

(dm ini-state ((table <tab>))
  (if (= (len table) 0)
      #f
      (lab return
	(let ((vector    (%vector table))
	      (n-buckets (%n-buckets vector))
	      (depth     (%bucket-depth vector)))
	  (rep outer (((b <int>) 0))
	    (when (< b n-buckets)
	      (rep inner (((i <int>) 0))
                (when (< i depth)
		  (let ((key (elt vector (+ i (* b (* depth 2))))))
		    (unless (or (== key $empty-cell-marker)
				(== key $vacated-cell-marker))
		      (return (isa <tab-state>
				(set %vector vector)
				(set %bucket b)
				(set %index  i))))
		    (inner (+ i 1)))))
	      (outer (+ b 1))))
	  #f))))

(dm nxt-state ((table <tab>) (state <tab-state>) => <any>)
  (let ((vector    (%vector state))
	(n-buckets (%n-buckets vector))
	(depth     (%bucket-depth vector))
	(bucket    (%bucket state))
	(index     (%index state)))
    ;; (inc index)
    ;; (when (= index depth)
    ;;   (inc bucket)
    ;;   (set index 0))
    (lab return
      (rep outer (((b <int>) bucket) (first? #t))
	(when (< b n-buckets)
	  (rep inner (((i <int>) (if first? (+ index 1) 0)))
	    (when (< i depth)
	      (let ((key (elt vector (+ i (* b (* depth 2))))))
		(unless (or (== key $empty-cell-marker)
			    (== key $vacated-cell-marker))
		  (set (%bucket state) b)
		  (set (%index state)  i)
		  (return state))
		(inner (+ i 1)))))
	  (outer (+ b 1) #f)))
      #f)))

(dm fin-state? ((table <tab>) state => <log>)
  (not state))

(dm now-key ((table <tab>) (state <tab-state>) => <any>)
  (let ((vector (%vector state))
	(depth  (%bucket-depth vector)))
    (elt vector (+ (%index state) (* (%bucket state) (* depth 2))))))

(dm now-elt
    ((table <tab>) (state <tab-state>) => <any>)
  (let ((vector (%vector state))
	(depth  (%bucket-depth vector)))
    (elt vector (+ (%index state) (+ depth (* (%bucket state) (* depth 2)))))))

(dm now-elt-setter
    (value (table <tab>) (state <tab-state>) => <any>)
  (let ((vector (%vector state))
	(index  (%index state))
	(depth  (%bucket-depth vector)))
    (set (elt vector (+ index (+ depth (* (%bucket state) (* depth 2)))))
	 value)))

(dm copy-state
    ((table <tab>) (state <tab-state>) => <tab-state>)
  (isa <tab-state>
    (set %vector (%vector state))
    (set %bucket (%bucket state))
    (set %index  (%index state))))  

;;; Internal functions

(dm tab-keys ((table <tab>) => <lst>)
  (collecting () (do-keyed (fun (k v) (collect k)) table)))

(dm grow-table ((table <tab>) => <tab>)
  (let ((vec (%vector table)))
    (trace out "GROWING TABLE %= %= OF %=\n" (object-name table)
  	      (%count table) (* (%n-buckets vec) (%bucket-depth vec))))
  (let ((vector (%vector table))
	((tup new-n-buckets new-bucket-depth)
	 (choose-table-geometry
	  (elt (floor (* (* (%n-buckets vector) (%bucket-depth vector))
			 (table-growth-factor table))) 0)))
	(new-vector
	 (fab-table-vector
           (* new-n-buckets (* new-bucket-depth 2))
           $empty-cell-marker
	   new-n-buckets new-bucket-depth new-n-buckets (- new-n-buckets 2))))
    ;; (trace out "OLD DATA %=\n" (%data (%vector table)))
    (copy-to-new-vector table new-vector)
    (set (%vector table) new-vector)
    ;; (trace out "NEW DATA %=\n" (%data (%vector table)))
    ;;--- It would be nice to be able to deallocate the old vector
    table))

(dm rehash-table ((table <tab>) => <tab>)
  (let ((vector (%vector table))
	(new-vector
	 (fab-table-vector 
	   (* (%n-buckets vector) (* (%bucket-depth vector) 2))
           $empty-cell-marker 
	   (%n-buckets vector) (%bucket-depth vector)
	   (%primary-modulus vector) 
           (%secondary-modulus vector))))
    (copy-to-new-vector table new-vector)
    (set (%vector table) new-vector)
    table))

(df choose-table-geometry 
     ((capacity <int>) => (tup (n-buckets <int>) (bucket-depth <int>)))
   ;;--- These numbers are completely arbitrary and need to be tuned up
   (lab return
     (let ((depth
	    (case
	      ((< capacity 2000)    1)
	      ((< capacity 5000)    2)
	      ((< capacity 15000)   4)
	      ((< capacity 50000)   8)
	      ((< capacity 250000) 16)
	      (#t                  32))))
       (do (fun ((p <int>))
	     (when (> p (elt (ceiling/ capacity depth) 0))
	       (return (tup (+ p 2) depth))))
	   *twin-primes*)
       (error "Not enough primes to compute new table size"))))

(dm copy-to-new-vector ((table <tab>) new-vector => <any>) ;; TODO: => (tup)
  (do-keyed
    (fun (k v)
      (lab return
	(let (((tup test-function hash-function) (table-protocol table))
	      ((tup (hash <int>) state) (hash-function k))
	      (new-n-buckets         (%n-buckets new-vector))
	      (new-bucket-depth      (%bucket-depth new-vector))
	      (new-primary-modulus   (%primary-modulus new-vector))
	      (new-secondary-modulus (%secondary-modulus new-vector))
	      ((tup new-bucket-index new-bucket-offset)
	       (hash-moduli hash new-primary-modulus new-secondary-modulus)))
	  ;; (trace out "VISITING (%= %=)\n" k v)
	  ;; Search each bucket
	  (rep outer (((probes <int>) 0))
	    (when (< probes new-n-buckets)
	      (let ((bucket-start (* new-bucket-index (* new-bucket-depth 2))))
		(rep inner (((i <int>) 0) ((index <int>) bucket-start))
		  (when (< i new-bucket-depth)
		    (let ((this-key (elt new-vector index)))
		      (when (== this-key $empty-cell-marker)
			;; (trace out "COPYING TO (%= %=) %=\n" k v index)
			(set (elt new-vector index) k)
			(set (elt new-vector (+ index new-bucket-depth)) v)
			(return #f))
		      (inner (+ i 1) (+ index 1)))))
		;; No room in this bucket try the next one
		(dec new-bucket-index new-bucket-offset)
		(when (neg? new-bucket-index)
		  (inc new-bucket-index new-n-buckets))
		(outer (+ probes 1)))))
	  ;; Table totally full???  That's not right
	  (error "The table is totally full this shouldn't happen"))))
    table))

;;; HASHING FUNCTIONS

;; TODO: NEED ADDRESS-OF

(dv $permanent-hash-state #f)
(df current-gc-state () $permanent-hash-state)

(dm id-hash (x)
  (tup (address-of x) (current-gc-state)))

(dm id-hash ((x <log>))
  (tup (if x 131 149) $permanent-hash-state))

;; TODO: CHECK FOR CORRECTNESS
(df rot ((x <int>) (a <int>) => <int>)
  (logior (ash x (neg a)) (ash x a)))

(dm id-hash ((x <int>))
  ;; Offset it so that 0 doesn't hash to 0
  (tup (abs (+ (- (rot x 15) x) 31)) $permanent-hash-state))
  
(dm id-hash ((x <chr>))
  (id-hash (as <int> x)))

(dm id-hash ((x <flo>))
  (tup (+ (flo-bits x) 89) $permanent-hash-state))

(df case-insensitive-string-hash ((x <str>) => (tup (hi <int>) hash-state))
  (let ((s 0) (e (len x)))
    (rep loop (((i <int>) s) ((hash <int>) 0))
      (if (< i e)
	  (loop (+ i 1)
		(modulo (+ (ash hash 6) 
			   (logand (as <int> (elt x i)) 159)) ;; #x9f
			970747))
	  (tup hash $permanent-hash-state)))))

(df case-insensitive-string-equal ((x <str>) (y <str>) => <log>)
  (let ((sy 0) (ey (len y)))
    (when (== (len x) (- ey sy))
      (rep loop (((i <int>) sy))
	(or (== i ey)
	    (let (((cx <chr>) (elt x (- i sy)))
		  ((cy <chr>) (elt y i)))
	      (and (or (== cx cy) (== (as-lowercase cx) (as-lowercase cy)))
		   (loop (+ i 1)))))))))

(dv <str-tab> (isa <tab>))

(dm table-protocol ((_ <str-tab>) => (tup (equal-fun <fun>) (hash-fun <fun>)))
  (tup case-insensitive-string-equal case-insensitive-string-hash))

(dv symbols (fab <str-tab> 2000))

(dp booted-fab-sym-using (name given-sym)
  (let ((sym (elt symbols name)))
    (if (== sym nul)
	(set (elt symbols name) (or given-sym (%sym name)))
	sym)))

(df booted-fab-sym (name)
  (booted-fab-sym-using name #f))

(df boot-symbols ()
  (rep boot ((syms %symbols))
    (unless (empty? syms)
      (let ((sym (head syms))) (booted-fab-sym-using (%sym-nam sym) sym))
      (boot (tail syms)))))

(boot-symbols)

(set fab-sym booted-fab-sym)

