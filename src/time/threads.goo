(use goo)
(use goo/boot)

(dl %thread-create)
(dl %thread-yield)
(dl %thread-priority)
(dl %thread-priority-setter)
(dl %thread-detach)
(dl %thread-current)
(dl %thread-sleep)

(dc <thread> (<any>))
  (dp thread-name (x|<thread> => (t? <sym>)) #f)
  (dp thread-function (x|<thread> => <fun>))
  (dp thread-priority (x|<thread> => <int>) 0)
  (dp hread-handle (x|<thread> =>)

(dm thread-yield () (%thread-yield))

(dm thread-detatch () (%thread-detach))

(dm fab-thread (name|<sym> priority|<int> function|<fun> => <thread>)
  (def h (%lb (%thread-create function)))
  (def t (new <thread> 
           thread-handle h thread-name name thread-priority priority
           thread-function function))
  (set (%thread-priority h) (%iu priority))
  t)

(dm sleep (msecs|<int>)
  (%thread-sleep (%iu msecs)))

;; (dg thread-current (=> <thread>))
;; (dg thread-join (t|<thread> ts|...))

(export 
  <thread>
  thread-name
  thread-function
  thread-priority
  thread-yield
  fab-thread
  sleep)
