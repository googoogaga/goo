(dv <frame> <assocs>)

(dv <env> (isa <any>))
  (slot <env> (env-next <env>))  
  (slot <env> (env-frame <frame>) (isa <frame>))  

(dv $empty-env (isa <env>))

(dm env-define-binding! ((env <env>) (name <sym>) (value <any>))
  (set (elt (env-frame env) name) value))

(dm env-extend! ((env <env>) (names <lst>) (values <lst>) => <env>)
  (let ((new-env (isa <env> (set env-next env))))
    (do2 (fun (name value) (set (elt (env-frame new-env) name) value))
	 names values)
    new-env))

(dm env-binding-value ((env <env>) (name <sym>) => <any>)
  (if (== env $empty-env)
      nul
      (let ((value (elt (env-frame env) name)))
	(if (== value nul)
	    (env-binding-value (env-next env) name)
	    value))))

(dm env-binding-value-setter ((value <any>) (env <env>) (name <sym>))
  (if (== env $empty-env)
      nul
      (if (== (elt (env-frame env) name) nul)
	  (set (env-binding-value (env-next env) name) value)
	  (set (elt (env-frame env) name) value))))

