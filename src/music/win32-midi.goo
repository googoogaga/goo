(use proto)
(use boot)
(use midi)

(dl %midi-out-open)
(dl %midi-out-reset)
(dl %midi-out-send)
(dl %midi-out-close) 
(dl %midi-in-register-callback)
(dl %midi-in-open)
(dl %midi-in-close)
(dl %midi-in-find-max-device-id)
(dl %midi-in-start)
(dl %midi-in-stop)
(dl %midi-in-reset)
(dl %midi-error-text) 

(dv <handle> <loc>)

(dv $max-devices 16)

(dv *midi-devices* (fab <vec> $max-devices))

(df id->midi-device (id)
  (%velt *midi-devices* (%iu id)))

(dc <win32-midi-device> (<midi-device>))
  (dp midi-id (x|<win32-midi-device> => <int>))
  (dp midi-out-open? (x|<win32-midi-device> => <log>) #f)
  (dp midi-out-handle (x|<win32-midi-device> => <handle>))
  (dp midi-in-open? (x|<win32-midi-device> => <log>) #f)
  (dp midi-in-callback (x|<win32-midi-device> => <fun>))
  (dp midi-in-handle (x|<win32-midi-device> => <handle>))

(dm fab-midi-device (id|<int> => <win32-midi-device>)
  (or (elt-or *midi-devices* id #f)
      (set (elt *midi-devices* id)
           (new <win32-midi-device> midi-id id))))

(dc <win32-midi-channel> (<midi-channel>))
  (dp midi-number (x|<win32-midi-channel> => <int>))

(dm fab-midi-channel (num|<int> => <midi-channel>)
  (new <win32-midi-channel> midi-number num))

(dv $midi-mapper -1)

(dv $midi-mapper-device (fab-midi-device (as <int> $midi-mapper)))

(dm default-midi-device (=> <win32-midi-device>)
  $midi-mapper-device)

(dm open-midi-out-device (md|<win32-midi-device>)
  (when (midi-out-open? md)
    (error "The MIDI device %= cannot be opened because it is already open" md))
  (def out-handle (%lb (%midi-out-open (%iu (midi-id md)))))
  (set (midi-out-handle md) out-handle)
  (set (midi-out-open? md)  #t)
  md)

(dm reset-midi-out-device (md|<win32-midi-device>)
  (unless (midi-out-open? md)
    (error "The MIDI device %= cannot be reset because it is not open" md))
  (%midi-out-reset (%lu (midi-out-handle md)))
  md)

(dm ensure-midi-out-device-open (md|<win32-midi-device>)
  (unless (midi-out-open? md)
    (error "The MIDI device %= cannot be used because it is not open" md)))

(dm close-midi-out-device (md|<win32-midi-device>)
  (ensure-midi-out-device-open md)
  (set (midi-out-open? md)  #f)
  (%midi-out-close (%lu (midi-out-handle md)))
  #f)

(dm midi-error-string (id|<int> => <str>)
  ;; (%sb (%midi-error-text id))
  "")

(dm send-midi-message
    (md|<win32-midi-device> stat|<int> chan|<int> x|<int> y|<int>)
  (ensure-midi-out-device-open md)
  (def code 
    (%ib (%midi-out-send 
          (%lu (midi-out-handle md)) 
          (%iu stat) (%iu chan) (%iu x) (%iu y))))
  (unless (= code 0)
    (error "Failed to open midi device %=: %s" md (midi-error-string code))))

;;; MIDI INPUT

;; (dv $mim-base 961) ;; 0x3C1
;; 
;; (dv $midi-in-types
;;   #(open close data long-data error long-error))
;; 
;; (df int->midi-in-type (x|<int> => <sym>)
;;   (elt-or $midi-in-types (- x $mim-base) 'unknown))
;; 
;; (dv $midi-in-kinds
;;   #(note-on long-note-on poly-after-touch control-change 
;;     after-touch pitch-bend))
;; 
;; (df int->midi-in-kind (i|<int> => <sym>)
;;   (elt-or $midi-in-kinds i 'unknown))

(df std-midi-in-callback (id chan type kind time d1 d2)
  (def dev  (id->midi-device id))
  ;; (def type (int->midi-in-type msg))
  ;; (def kind (int->midi-in-kind stat))
  (unless (== kind 'unknown)
    ((midi-in-callback dev) dev chan type kind time d1 d2)))

(dm open-midi-in-device (md|<win32-midi-device> callback|<fun>)
  (when (midi-in-open? md)
    (error "The MIDI device %= cannot be opened because it is already open" md))
  (%midi-in-register-callback std-midi-in-callback)
  (def in-handle (%lb (%midi-in-open (%iu (midi-id md)))))
  (set (midi-in-handle md)   in-handle)
  (set (midi-in-callback md) callback)
  (set (midi-in-open? md)    #t)
  md)

(dm ensure-midi-in-device-open (md|<win32-midi-device>)
  (unless (midi-in-open? md)
    (error "The MIDI device %= cannot be used because it is not open" md)))

(dm midi-in-devices (=> <lst>)
  (def max-device (%ib (%midi-in-find-max-device-id)))
  (collecting ()
    (do (fun (id) (collect (fab-midi-device id)))
        (below max-device))))

(dm start-midi-in-device (md|<win32-midi-device>)
  (ensure-midi-in-device-open md)
  (%midi-in-start (%lu (midi-in-handle md))))

(dm reset-midi-in-device (md|<win32-midi-device>)
  (ensure-midi-in-device-open md)
  (%midi-in-reset (%lu (midi-in-handle md))))

(dm stop-midi-in-device (md|<win32-midi-device>)
  (ensure-midi-in-device-open md)
  (%midi-in-stop (%lu (midi-in-handle md))))

(dm close-midi-in-device (md|<win32-midi-device>)
  (ensure-midi-in-device-open md)
  (set (midi-in-open? md)  #f)
  (set (midi-in-callback md) identity)
  (%midi-in-close (%lu (midi-in-handle md)))
  #f)

