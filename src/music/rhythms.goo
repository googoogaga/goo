;;;; Copyright 2002, Jonathan Bachrach.  See file TERMS.

(use goo)
(use goo/random)

(dc <pattern> (<any>))
  (dp pattern-time (<pattern> => <int>))
  (dp pattern-rhythm (<pattern> => <sym>))
  (dp pattern-kind (<pattern> => <sym>))
  (dp pattern-part (<pattern> => <int>))
  (dp pattern-instrument (<pattern> => <sym>))
  (dp pattern-value (<pattern> => <str>))

(dv $patterns (fab <vec> 0))

(dm register-pattern (time rhythm kind part instrument value)
  (def pat (new <pattern>
             pattern-time       time
             pattern-rhythm     rhythm
             pattern-kind       kind
             pattern-part       part
             pattern-instrument instrument
             pattern-value      value))
  (add! $patterns pat))

(ds (def-rhythm ,time ,name ,@patterns)
  (let ((pattern-inits
         (map (fun (pat)
                (mif ((,kind ,part ,instrument ,value) pat) 
                     `(lst ,time ',name ',kind ',part ',instrument ,value)))
              patterns)))
    `(do (fun (pat-inits) (app register-pattern pat-inits))
         (lst ,@pattern-inits))))

(def-rhythm 4 cassa
  (acc    1 djembe   "B+TT++STT+SSB+ST")
  (acc    2 djembe   "S++SS+TTS++SS+TT")
  (acc    3 djembe   "++TT++S+++TT++S+")
  (bass   1 djundjun "T++BB+++T+T+++++")
  (signal 1 djembe   "F+TT+T+TT+TTT+++"))

(def-rhythm 4 clave
  (clave 1 clave "T++T++T+++T+T+++")
  (clave 2 clave "T+++T+++T+++T+++")
  (clave 3 clave "T+++++++T+++T+++"))

(def-rhythm 4 dalah
  (acc 1 djembe "B+TT++SSB+TT++SS")
  (acc 2 djembe "S++SS+TTS++SS+TT"))

(def-rhythm 4 dennadon
  (acc  1 djembe   "SS+BT+T+SS+BT+T+")
  (acc  2 djembe   "S++SS+TTS++SS+TT")
  (bass 1 djundjun "S+++S+++S+++S+++")
  (bass 2 djundjun "+++T++T+++TT++T+")
  (bass 3 djundjun "BB++B+++B+B+B+++"))

(def-rhythm 4 sounou
  (bass   1 djundjun "B++++BBBB++++++B")
  (acc    1 djembe   "TT+SS+BSTT+SS+BS")
  (acc    2 djembe   "S++SS+TTS++SS+TT")
  (acc    3 djembe   "TT+SS+BSTT+SSBBS")
  (signal 1 djembe   "F+TT+T+TT+SSS+++"))

(def-rhythm 4 diansa
  (bass   1 djundjun "B++B++B+++T+++B+")
  (bass   2 djundjun "B++B++B+++T+++B+")
  (acc    1 djembe   "S++SS+TTS++SS+TT")
  (acc    2 djembe   "TTSS++SSTTSS++SS")
  (acc    3 djembe   "TT+TT+TTS+B+SBTT")
  (signal 1 djembe   "TTSTTSTTS+SSS+++"))

(def-rhythm 4 koukou
  (bass   1 djundjun "T++B++T+T+++++T+")
  (acc    1 djembe   "B+TT++S+B+TT++S+")
  (acc    2 djembe   "TT+STTS+TT+STTS+")
  (acc    3 djembe   "B++S+BS+B+TTT+S+")
  (acc    4 djembe   "S++SS+TTS++SS+TT"))

(def-rhythm 4 pulse
  (pulse 1 metronome "B+++B+++B+++B+++"))

(def-rhythm 6 clave
  (clave 1 clave "BB++BB+B+B++"))

(def-rhythm 4 nul
  (pulse 1 metronome "++++++++++++++++"))

(dm num-patterns (=> <int>)
  (len $patterns))

(df match-pattern?
    (pattern|<pattern> rhythm|(t? <sym>) time|(t? <int>) 
     kind|(t? <sym>) inst|(t? <sym>) 
     => <log>)
  (and (or (not rhythm) (== (pattern-rhythm pattern)     rhythm))
       (or (not time)   (== (pattern-time pattern)       time))
       (or (not kind)   (== (pattern-kind pattern)       kind))
       (or (not inst)   (== (pattern-instrument pattern) inst))))


(dm choose-pattern
    (rhythm|(t? <sym>) time|(t? <int>) kind|(t? <sym>) inst|(t? <sym>) 
     => (t? <pattern>))
  (def n (num-patterns))
  (rep loop ((i (random n)) (tries 0))
    (if #f;; (== tries n)
        #f
        (let ((pattern (elt $patterns i)))
          (if (match-pattern? pattern rhythm time kind inst)
              pattern
              (loop (random n) (+ tries 1)))))))

(dm choose-1st-pattern
    (rhythm|(t? <sym>) time|(t? <int>) kind|(t? <sym>) inst|(t? <sym>) 
     => (t? <pattern>))
  (def n (num-patterns))
  (rep loop ((i 0))
    (if (< i n)
        (let ((pattern (elt $patterns i)))
          (if (match-pattern? pattern rhythm time kind inst)
              pattern
              (loop (+ i 1))))
        #f)))

(export
  <pattern>
  pattern-time
  pattern-rhythm
  pattern-kind
  pattern-part
  pattern-instrument
  pattern-value
  choose-pattern
  choose-1st-pattern)
