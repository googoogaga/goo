(use proto)
(use tests/driver)

(use proto/private/dependency)

(test-group dep-types
  (test== (dependency-empty? $empty-dependency)      #t)
  (test== (dependency-empty? $name-parse-dependency) #f)
  (test== (dependency-includes-all? $parse-dependencies $name-parse-dependency)
          #t)
  (let ((n-and-e (dependency-or $name-parse-dependency
                                $expansion-parse-dependency)))
    (test== (dependency-includes-all? n-and-e $name-parse-dependency) #t)
    (test== (dependency-includes-all? n-and-e $expansion-parse-dependency)
            #t)))

(dc <test-dependent> (<dependent>))
  (slot <test-dependent> (last-invalidation <dependency-type>)
        $empty-dependency)
  (slot <test-dependent> (invalidation-count <int>) 0)

(dm invalidate-dependent ((self <test-dependent>)
                          (dependable <dependable>)
                          (dtype <dependency-type>))
  (set (last-invalidation self) dtype)
  (inc (invalidation-count self)))

(test-group dep-track
  (let ((source1 (isa <dependable>))
        (source2 (isa <dependable>))
        (dest1 (isa <test-dependent>))
        (dest2 (isa <test-dependent>)))
    (test== (find-dependency source1 dest1) #f)
    (test== (find-dependency source1 dest2) #f)
    (log-dependency source1 dest1 $name-parse-dependency)
    (test=  (find-dependency source1 dest1) $name-parse-dependency)
    (log-dependency source1 dest2 $expansion-parse-dependency)
    (log-dependency source1 dest2 $value-optimization-dependency)
    (test=  (find-dependency source1 dest2)
            (dependency-or $expansion-parse-dependency
                           $value-optimization-dependency))
    (test== (invalidation-count dest1) 0)
    (test=  (last-invalidation dest1) $empty-dependency)
    (test== (invalidation-count dest2) 0)
    (test=  (last-invalidation dest2) $empty-dependency)
    (invalidate-dependents source1 $parse-dependencies)
    (test== (invalidation-count dest1) 1)
    (test=  (last-invalidation dest1) $name-parse-dependency)
    (test== (invalidation-count dest2) 1)
    (test=  (last-invalidation dest2) $expansion-parse-dependency)
    (invalidate-dependents source1 $optimizaton-dependencies)
    (test== (invalidation-count dest1) 1)
    (test== (invalidation-count dest2) 2)
    (test=  (last-invalidation dest2) $value-optimization-dependency)
    (log-dependency source2 dest2 $name-parse-dependency)
    (test=  (find-dependency source2 dest2) $name-parse-dependency)
    (detach-dependent dest2)
    (test=  (find-dependency source1 dest2) #f)
    (test=  (find-dependency source2 dest2) #f)))
