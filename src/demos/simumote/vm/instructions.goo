(use goo)

;; ---------- Framework ---------

(dc <vm-ast-node> (<any>))

(dc <vm-value> (<any>))

(dc <vm-env> (<vm-value>)) ;; the value is a kludge. hee hee! I'm a horrible coder!
(dp! env-parent (<vm-env> => (t? <vm-env>)) #f)
(dp! env-bindings (<vm-env> => <tab>) (fab <tab> 0))

(dv $vm-sys-env (new <vm-env>))



;; --- Processing and Stuff ---

(dg execute-node (env|<vm-env> node|<vm-ast-node> => <vm-value>))

(dv $symbol-to-handler (fab <tab> 0))

(dm reg-handler (sym|<sym> handler|<fun>)
  (set (elt $symbol-to-handler sym) handler)
  )

;;----- Values -----

(dc <vm-int> (<vm-value>))
(dp! val (<vm-int> => <int>))

(dc <vm-bool> (<vm-value>))
(dp! val (<vm-bool> => <log>))

(d. $vm-true (seq (def v (new <vm-bool>)) (set (val v) #t) v))
(d. $vm-false (seq (def v (new <vm-bool>)) (set (val v) #f) v))

(dm vm-true? (bval|<vm-int> => <log>)
  (~= (val bval) 0)
  )

(dm vm-true? (bval|<vm-bool> => <log>)
  (val bval))

(dm vm-false? (bval|<vm-bool> => <log>)
  (not (val bval)))

(dm wrap-value (ival|<int> => <vm-int>)
  (def nint (new <vm-int>))
  (set (val nint) ival)
  nint
  )

(dm wrap-value (bval|<log> => <vm-bool>)
  (if bval $vm-true $vm-false)
  )

(dm unwrap (vmval|<vm-int> => <int>)
  (val vmval)
  )

(dm unwrap (vmval|<vm-bool> => <log>)
  (val vmval)
  )

;; The base types are immutable. So just return them.
(dm clone-var (vmval|<vm-value> => <vm-value>)
  vmval
  )

(dm to-str (vmval|<vm-value> => <str>)
  (to-str (unwrap vmval)))

(dm = (v1|<vm-value> v2|<vm-value> => <log>)
  (= (val v1) (val v2)))

;;(dm == (v1|<vm-value> v2|<vm-value>)
;;  (= (val v1) (val v2)))

(dc <vm-val-env> (<vm-value>))
(dp! val (<vm-bool> => <vm-env>))

(dm wrap-env (env|<vm-env> => <vm-val-env>)
  (def venv (new <vm-val-env>))
  (set (val venv) env)
  venv
  )

;; ----- Indirect Reference -----
;; Indirect references are used in indirect looping constructs over the contents
;;  of a collection.  They are basically references to existing slots in a 
;;  collection.  As such, reads return the value of the slot in the collection.
;;  Writes overwrite the value at the given slot in the collection.
;; Because these are overloaded into the standard environment implementation,
;;  their implementation requires that the environment must be made aware on 
;;  writes.  Thanks to the existing use of getters to determine the value of
;;  wrapped values, no extra code is actually required on reads.
(dc <vm-indirect-ref> (<vm-value>))

(dm is-indirect-ref? (vmval|<vm-value> => <log>)
  (isa? vmval <vm-indirect-ref>)
  )

;; ----- List (definition) -----
(dc <vm-list> (<vm-value>))
(dp! val (<vm-list> => <col>))

;; For mutable collections, it just wraps.
;; For immutable collections, it copies the contents
(dm wrap-value (cval|<col> => <vm-list>)
  (def nlist (new <vm-list>))
  (if (isa? cval <col!>)     
      (set (val nlist) cval)
      (set (val nlist) (cat! (vec) cval)))
  nlist
  )

(dm unwrap (lval|<vm-list> => <col>)
  (val lval)
  )

(dm clone-var (vmval|<vm-list> => <vm-value>)
  (def nlist (new <vm-list>))
  (set (val nlist) (dup (val vmval)))
  nlist
  )

;;(dm to-str (vml|<vm-list> => <str>)
;;  "(list)"
;;  )

(dc <vm-indirect-list-ref> (<vm-indirect-ref>))
(dp! ref-list (<vm-indirect-list-ref> => <vm-list>))
(dp! ref-index (<vm-indirect-list-ref> => <any>))

(dm fab-indirect-elt (vml|<vm-list> index|<any> => <vm-indirect-list-ref>)
  (def nref (new <vm-indirect-list-ref>))
  (set (ref-list nref) vml)
  (set (ref-index nref) index)
  nref
  )

(dm indirect-set (iref|<vm-indirect-list-ref> new-val|<any>)
  (set (elt (val (ref-list iref)) (ref-index iref)) new-val)
  new-val
  )

(dm indirect-get (iref|<vm-indirect-list-ref> => <vm-value>)
  (elt (val (ref-list iref)) (ref-index iref))
  )

;; ---------- Implementation ----------
(dg consume-node (node|<any> => <vm-ast-node>))

;; ----- Fundamentals -----
(dc <vm-seq> (<vm-ast-node>))
(dp! nodes (<vm-seq> => <col>) (vec))

(d. $null-vm-seq (new <vm-seq>))

(dm execute-node (env|<vm-env> node|<vm-seq> => <vm-value>)
  (def rval $vm-false)
  (do (fun (x) 
        (set rval (execute-node env x)))
      (nodes node))
  rval
  )

(dm consume-seq (node|<list> => <vm-ast-node>)
  (if (= (len node) 0)
      $null-vm-seq
      (seq
        (def nseq (new <vm-seq>))
        (def snode (if (= 'seq (1st node)) (tail node) node))
        (set (nodes nseq)
             (map consume-node snode))
        nseq
        )
      )
  )

(reg-handler 'seq consume-seq)

;; --- Immediate ---
(dc <vm-immediate> (<vm-ast-node>))
(dp! immed-val (<vm-immediate> => <vm-value>))

(dm immedify (mval|<vm-value> => <vm-immediate>)
  (def nimmed (new <vm-immediate>))
  (set (immed-val nimmed) mval)
  nimmed
  )

(dm execute-node (env|<vm-env> node|<vm-immediate> => <vm-value>)
  (immed-val node))

;; A bit of a hack, but allows a reasonable normalization.
(dm wrap-value (immval|<vm-immediate> => <vm-value>)
  (immed-val immval)
  )

(d. $vm-ast-true (immedify $vm-true))
(d. $vm-ast-false (immedify $vm-false))

;; ----- Constants ------
(dv $constant-table (fab <tab> 0))

(dm consume-constant (nlist|<list> => <vm-ast-node>)
  (def mval (wrap-value (3rd nlist)))
  (set (elt $constant-table (2nd nlist)) mval)
  $vm-ast-true
  )

(dm is-constant (sym|<sym> => <log>)
  (and (elt-or $constant-table sym #f) 
       #t)
  )

(dm get-constant-val (sym|<sym> => <vm-value>)
  (elt $constant-table sym)
  )

(reg-handler 'defconst consume-constant)

;; --- Bindings & Environment ---
;; All of this code is a bit of a horrible kludge.  The original design was
;;  a bit of a kludge, and then I tacked on indirect references and 
;;  nested references.  Now this is just horrible.  So horrible.  Oh the
;;  humanity!
(dc <vm-binding> (<vm-ast-node>))
(dp! binding-sym (<vm-binding> => <sym>))

(dm new-binding (sym|<sym> => <vm-binding>)
  (def binding (new <vm-binding>))
  (set (binding-sym binding) sym)
  binding
  )

(dm is-nested-ref? (binding|<vm-binding>)
  (def sb (as <str> (binding-sym binding)))
  (mem? sb (1st ":"))
  )

(dm nested-ref-head (binding|<vm-binding> => <vm-binding>)
  (def sb (as <str> (binding-sym binding)))
  (def sb-head (1st (split sb (1st ":"))))
  (new-binding (as <sym> sb-head))
  )

(dm nested-ref-tail (binding|<vm-binding> => <vm-binding>)
  (def sb (as <str> (binding-sym binding)))
  (def sb-split (split sb (1st ":")))
  (def sb-tail (join (sub sb-split 1 (len sb-split)) ":"))
  (new-binding (as <sym> sb-tail))
  )

;; This fucking shimmies up the chain.  Dammit.
(dm local-env-lookup (env|<vm-env> binding|<vm-binding>)
  (or (and (mem? (keys (env-bindings env)) (binding-sym binding)) ;; Can't use elt-or as the value stored may be equivalent to false.  Oops.
           (elt (env-bindings env) (binding-sym binding)))
      (and (env-parent env)
           (local-env-lookup (env-parent env) binding))
      (seq
        (post "Lookup failing on binding: %=\n" binding)
        $vm-ast-false))
  )

(dm nested-env-lookup (env|<vm-env> binding|<vm-binding> => <vm-value>)
  (if (is-nested-ref? binding)
      (seq
        (def n-head (nested-ref-head binding))
        (def n-tail (nested-ref-tail binding))

        (def head-resolved-to-env (local-env-lookup env n-head))
        (if (~= head-resolved-to-env $vm-ast-false)
            (nested-env-lookup head-resolved-to-env n-tail)
            $vm-ast-false)
        )
      (local-env-lookup env binding))
  )

;; from here on out are the world visible functions. they have been amended
;;  to support the nested functionality via the above helper functions.

(dm execute-node (env|<vm-env> binding|<vm-binding> => <vm-value>)
  (def boundval (nested-env-lookup env binding))
  (if (is-indirect-ref? boundval)
      (indirect-get boundval)
      boundval)
  )

(dm env-lookup (env|<vm-env> binding|<vm-binding>)
  (nested-env-lookup env binding)
  )

(dm env-lookup (env|<vm-env> sym|<sym>)
  (nested-env-lookup env (new-binding sym))
  )

;; Returns the env containing the thing.  local version...
(dm local-env-find-binding (env|<vm-env> binding|<vm-binding>)
  (or (and (elt-or (env-bindings env) (binding-sym binding) #f)
           env)
      (and (env-parent env)
           (local-env-find-binding (env-parent env) binding))
      (seq
        (post "Lookup failing on binding: %=\n" binding)
        $vm-ast-false))
  )

;; Returns the first environment holding the requested binding
;;  or false if the binding can not be found in the given 
;;  environment chain.
(dm env-find-binding (env|<vm-env> binding|<vm-binding> => (t? <vm-env>))
  ;; This part just basically recurses down until we reach the traditional
  ;;  base case.  Not too bad.
  (if (is-nested-ref? binding)
      (seq
        (def n-head (nested-ref-head binding))
        (def n-tail (nested-ref-tail binding))

        (def head-resolved-to-env (local-env-lookup env n-head))
        (if (~== head-resolved-to-env $vm-ast-false)
            (env-find-binding head-resolved-to-env n-tail)
            (seq 
              (post "Unable to find binding %=\n" (binding-sym binding))
              #f))
        )

      (local-env-find-binding env binding)
      )
  )

;; Setting in to non-existant nested variables should fail quite horribly.
;; Specifically, if we have a:b and a is valid, but b is not, KABOOM!
(dm env-set (env|<vm-env> binding|<vm-binding> value|<vm-value>)
  ;; Use the current env if we can't find it in an existing env.
  (def env-to-use (or (env-find-binding env binding) env))
  (def bindings (env-bindings env-to-use))
  (def cur-binding (elt-or bindings (binding-sym binding) #f))
  (if (and cur-binding (is-indirect-ref? cur-binding))
      ;; Handle indirect ref
      (indirect-set cur-binding value)
      ;; Handle normal variable
      (set (elt bindings
                (binding-sym binding))
           value)
      )
  )

(dm clone-env (env|<vm-env> => <vm-env>)
  (def nenv (new <vm-env>))
  (set (env-parent nenv) (env-parent env))
;;  (set (env-bindings nenv) (dup (env-bindings env)))
  (for ((key-val-tup (items (env-bindings env))))
    (def the-key (1st key-val-tup))
    (def the-val (2nd key-val-tup))
    (set (elt (env-bindings nenv) the-key) (clone-var the-val))
    )
  nenv
  )

;; ----- Symbols ------
(dc <vm-symbol> (<vm-ast-node> <vm-value>))
(dp! sym (<vm-symbol> => <sym>))

(dm consume-sym (nlist|<list> => <vm-ast-node>)
  (def nsym (new <vm-symbol>))
  (set (sym nsym) (2nd nlist))
  nsym
  )

;; self-evaluative! muahahah
(dm execute-node (env|<vm-env> node|<vm-symbol> => <vm-value>)
  node
  )

(reg-handler 'quote consume-sym)

(dv $vm-symbol-table-mapping (fab <tab> 0))
(dv $vm-symbol-high-val 0) ;; 0 will not actually be assigned!

(dm val (vmsym|<vm-symbol> => <int>)
  (elt! $vm-symbol-table-mapping (sym vmsym)
        (fun ()
          (incf $vm-symbol-high-val)))
  )

(dm unwrap (vmval|<vm-symbol> => <int>)
  (val vmval)
  )

;; This function takes a collection of environments from top to bottom,
;;  and chains them accordingly via the parent relationship.  No cloning
;;  occurs, just mutation.
(dm chain-envs (envs|<col> => <vm-env>)
  ;; this would be better done with 'loop' perhaps, but I'm lazy.
  (def last-env #f)
  (do (fun (cur-env)
        (set (env-parent cur-env) last-env)
        (set last-env cur-env)
        )
      envs)
  last-env
  )

;; ----- Equivalence / Comparison -----
(dc <vm-comparison-node> (<vm-ast-node>))
(dp! operator (<vm-comparison-node> => <any>))
(dp! op-left (<vm-comparison-node> => <vm-ast-node>))
(dp! op-right (<vm-comparison-node> => <vm-ast-node>))

(dm consume-comparison (nlist|<list> => <vm-comparison-node>)
  (def ncomp (new <vm-comparison-node>))
  (set (operator ncomp)
       (case (1st nlist)
         (('<) <)
         (('>) >)
         (('>=) >=)
         (('<=) <=)
         (('= '==) =)))
  (set (op-left ncomp) (consume-node (2nd nlist)))
  (set (op-right ncomp) (consume-node (3rd nlist)))
  ncomp
  )

(dm execute-node (env|<vm-env> node|<vm-comparison-node> => <vm-value>)
  (if ((operator node)
       (unwrap (execute-node env (op-left node)))
       (unwrap (execute-node env (op-right node))))
      $vm-true
      $vm-false)
  )

(reg-handler '< consume-comparison)
(reg-handler '> consume-comparison)
(reg-handler '>= consume-comparison)
(reg-handler '<= consume-comparison)
(reg-handler '= consume-comparison)
(reg-handler '== consume-comparison)

;; ----- Math -----

(dc <vm-math-node> (<vm-ast-node>))
(dp! operands (<vm-math-node> => <col>))
(dp! operator (<vm-math-node> => <any>))

(dm execute-node (env|<vm-env> node|<vm-math-node> => <vm-value>)
  (def retval (fold+ (operator node) (map unwrap (map (fun (x) (execute-node env x)) (operands node)))))
  (def retobj (new <vm-int>))
  (set (val retobj) retval)
  retobj
  )

(dm consume-math (nlist|<list> => <vm-math-node>)
  (def nmath (new <vm-math-node>))
  (set (operator nmath)
       (case (1st nlist)
         (('+) +)
         (('-) -)
         (('/) /)
         (('*) *)))
  (set (operands nmath) 
       (map consume-node (tail nlist)))
  nmath
  )

(reg-handler '+ consume-math)
(reg-handler '- consume-math)
(reg-handler '/ consume-math)
(reg-handler '* consume-math)

;; ----- Logic -----
(dc <vm-logic-node> (<vm-ast-node>))
(dp! operands (<vm-logic-node> => <col>))
(dp! operator (<vm-logic-node> => <any>))

(dm execute-node (env|<vm-env> node|<vm-logic-node> => <vm-value>)
  (case (operator node)
    (('or)
     (esc got-true
       (do (fun (x)
             (def result (execute-node env x))
             (when (not (vm-false? result))
               (got-true result))
             )
           (operands node)
           )
       $vm-false
       )
     )
    (('and)
     (esc got-false
       (do (fun (x)
             (def result (execute-node env x))
             (when (vm-false? result)
               (got-false result))
             )
           (operands node)
           )
       $vm-true
       )
     )
    (('not)
     (def result (execute-node env (1st (operands node))))
     (wrap-value (not (vm-true? result)))
     )
    )
  )

(dm consume-logic (nlist|<list> => <vm-logic-node>)
  (def nlogic (new <vm-logic-node>))
  (set (operator nlogic) (head nlist))
  (set (operands nlogic) 
       (map consume-node (tail nlist)))
  nlogic
  )

(reg-handler 'or consume-logic)
(reg-handler 'and consume-logic)
(reg-handler 'not consume-logic)

;; ----- Control Flow ------
(dc <vm-if-node> (<vm-ast-node>))
(dp! test-node (<vm-if-node> => <vm-ast-node>))
(dp! true-case (<vm-if-node> => <vm-ast-node>))
(dp! false-case (<vm-if-node> => <vm-ast-node>))

(dm execute-node (env|<vm-env> node|<vm-if-node> => <vm-value>)
  (if (vm-true? (execute-node env (test-node node)))
      (execute-node env (true-case node))
      (execute-node env (false-case node)))
  )

;; IF test-node true-case false-case
;; 0     1          2         3
(dm consume-if (nlist|<list> => <vm-if-node>)
  (def new-if (new <vm-if-node>))
  (set (test-node new-if) (consume-node (elt nlist 1)))
  (set (true-case new-if) (consume-node (elt nlist 2)))
  (set (false-case new-if) (consume-node (elt nlist 3)))
  new-if
  )

;; WHEN test-node true-case
;;  0       1         2
(dm consume-when (nlist|<list> => <vm-if-node>)
  (def new-if (new <vm-if-node>))
  (set (test-node new-if) (consume-node (2nd nlist)))
  (set (true-case new-if) (consume-seq (tail (tail nlist))))
  (set (false-case new-if) $null-vm-seq) ;; an empty sequence implicitly returns #f!
  new-if
  )

;; UNLESS test-node false-case
;;   0        1         2 
(dm consume-unless (nlist|<list> => <vm-if-node>)
  (def new-if (new <vm-if-node>))
  (set (test-node new-if) (consume-node (head (tail nlist))))
  (set (true-case new-if) $null-vm-seq)
  (set (false-case new-if) (consume-seq (tail (tail nlist))))
  new-if
  )

(reg-handler 'if consume-if)
(reg-handler 'when consume-when)
(reg-handler 'unless consume-unless)

(dc <vm-case-node> (<vm-ast-node>))
(dp! case-var (<vm-case-node> => <vm-ast-node>))
(dp! case-cases (<vm-case-node> => <col>) (vec))

;; CASE variable
;;  (match1 code...)
;;  (match2 code...)
;; WHERE match1 _may_ be a list? maybe? hm. don't know. maybe.
(dm consume-case (nlist|<list> => <vm-case-node>)
  (def new-case (new <vm-case-node>))
  (set (case-var new-case) (consume-node (2nd nlist)))
  (do (fun (case-pair)
        (add! (case-cases new-case)
              (tup (consume-var-val (1st case-pair))
                   (consume-seq (tail case-pair))))
        )
      (tail (tail nlist)))
  new-case
  )

(dm execute-node (env|<vm-env> cnode|<vm-case-node> => <vm-value>)
  (def comp-value (execute-node env (case-var cnode)))
  (def chosen-case 
    (esc found-it 
      (for ((case-tup (case-cases cnode)))
        (if (= comp-value (1st case-tup))
            (found-it (2nd case-tup))))
      )
    )
  (if chosen-case
    (execute-node env chosen-case)
    $vm-false
    )
  )

(reg-handler 'case consume-case)

;; ----- Env Manip -----
(dc <vm-set-node> (<vm-ast-node>))
(dp! binding-name (<vm-set-node> => <vm-binding>))
(dp! binding-node (<vm-set-node> => <vm-ast-node>))

(dm execute-node (env|<vm-env> node|<vm-set-node> => <vm-value>)
  (def val (execute-node env (binding-node node)))
  ;; Clone it if it's a list!
  (when (isa? val <vm-list>)
    (set val (clone-var val)))
  (env-set env
           (binding-name node)
           val)
  val
  )

;; SET binding-name binding-node
;;  0        1           2
(dm consume-set (nlist|<list> => <vm-set-node>)
  (def nset (new <vm-set-node>))
  (set (binding-name nset) (new-binding (2nd nlist)))
  (set (binding-node nset) (consume-node (3rd nlist)))
  nset
  )

(reg-handler 'set consume-set)

(dc <vm-def-node> (<vm-set-node>))

(dm execute-node (env|<vm-env> node|<vm-def-node> => <vm-value>)
  (def val (execute-node env (binding-node node)))
  ;; Clone it if it's a list!
  (when (isa? val <vm-list>)
    (set val (clone-var val)))

  (set (elt (env-bindings env) (binding-name node))
       val)
  val
  )

;; DEF binding-name binding-node
;;  0        1           2
(dm consume-def (nlist|<list> => <vm-set-node>)
  (def ndef (new <vm-def-node>))
  (set (binding-name ndef) (new-binding (2nd nlist)))
  (set (binding-node ndef) (consume-node (3rd nlist)))
  ndef
  )

(reg-handler 'def consume-def)

;; ----- Functions ------

(dc <vm-fun> (<vm-value>))

(dc <vm-sys-fun> (<vm-fun>))
(dp! sys-fun (<vm-sys-fun> => <fun>))

(dc <vm-user-fun> (<vm-fun>))
(dp! user-fun (<vm-user-fun> => <vm-seq>))

(dm make-sys-fun (some-fun|<fun> => <vm-sys-fun>)
  (def nfun (new <vm-sys-fun>))
  (set (sys-fun nfun) some-fun)
  nfun
  )

;; DOES _NOT_ evaluate args.  They are assumed to be vm-values!!!
(dm invoke-fun (env|<vm-env> func|<vm-sys-fun> args|<col> => <vm-value>)
  (def modargs (vec env))
  (cat! modargs args)
  (wrap-value (app (sys-fun func) modargs))
  )

;; DOES _NOT_ evaluate args.  They are assumed to be vm-values!!!
(dm invoke-fun (env|<vm-env> func|<vm-user-fun> args|<col> => <vm-value>)
  ;; tocode todo fixme
  )

;; ----- Applications -----

(dc <vm-fun-appl> (<vm-ast-node>))
(dp! fun-binding (<vm-fun-appl> => <vm-binding>))
(dp! fun-args (<vm-fun-appl> => <col>))

(dm execute-node (env|<vm-env> node|<vm-fun-appl> => <vm-value>)
  (def args (map (fun (x) (execute-node env x)) (fun-args node)))
  (def da-fun (env-lookup env (fun-binding node)))
  (invoke-fun env da-fun args)
  )

(dm consume-appl (nlist|<list> => <vm-ast-node>)
  (def nappl (new <vm-fun-appl>))
  (set (fun-binding nappl) (new-binding (head nlist)))
  (set (fun-args nappl) (map consume-node (tail nlist)))
  nappl
  )

;; ----- Looping Constructs ------
(dc <vm-for-node> (<vm-ast-node>))
(dp! is-find (<vm-for-node> => <log>) #f)
(dp! collection-pairs (<vm-for-node> => <vec>))
(dp! body-code (<vm-for-node> => <vm-seq>))

;;  0                1                   2...
;; FOR (VARPAIR1 VARPAIR2 ... VARPAIRN) BODY...
;;  where VARPAIR = (BINDING_NAME COLLECTION_NAME)
(dm consume-for (nlist|<list> => <vm-for-node>)
  (def nfor (new <vm-for-node>))
  ;; Mark whether it's a find or not
  (set (is-find nfor) (= (1st nlist) 'find))
  (set (collection-pairs nfor) (2nd nlist))
  (set (body-code nfor) (consume-seq (tail (tail nlist))))
  nfor
  )

(dm execute-node (env|<vm-env> node|<vm-for-node> => <vm-value>)
  ;; Create our own environment, chaining it to the current env
  (def our-env (new <vm-env>))
  (set (env-parent our-env) env)
  
  ;; Find all the collections in the environment passed to us.
  (def our-cols 
    (map (fun (varpair)
           (env-lookup env (2nd varpair)))
         (collection-pairs node)))

  (esc found-it
    ;; Iterate over the range of the first collection
    (for ((index (range 0 < (len (1st our-cols)))))
      ;; Iterate over the collections, creating the indirect references and
      ;;  setting them in our created env.
      (for ((cur-col our-cols) (varpair (collection-pairs node)))
        (env-set our-env (1st varpair) (fab-indirect-elt cur-col index)))

      ;; Execute the body
      (def rval (execute-node our-env (body-code node)))
      (when (and (is-find node)
                 (vm-true? rval))
        (found-it rval))
      )
    ;; Didn't find it or we were just doing a plain for.
    (found-it $vm-false)
    )
  )

(reg-handler 'for  consume-for)
(reg-handler 'find consume-for)
;; -------- Constructicons --------

(dm consume-node (node|<int> => <vm-ast-node>)
  (def nint (new <vm-int>))
  (set (val nint) node)
  (immedify nint)
  )

(dm consume-node (node|<log> => <vm-ast-node>)
  (def nlog (new <vm-bool>))
  (set (val nlog) node)
  (immedify nlog)
  )

(dm consume-node (node|<sym> => <vm-ast-node>)
  (if (is-constant node)
      (immedify (get-constant-val node))
      (new-binding node)
      )
  )

(dm consume-node (nlist|<list> => <vm-ast-node>)
  (def fsym (1st nlist))
  (def handler (elt-or $symbol-to-handler fsym #f))
  (if handler
      (handler nlist)
      (seq
        (post "Unable to find handler for %=, assuming application\n" fsym)
        (consume-appl nlist)
        )
      )
  )

;; Just consume-node on everything! it's fun!
(dm consume-top-level (snode|<list>)
  (do (fun (x) (consume-node x))
      snode)
  )

(dm consume-var-val (node|<any> => <vm-value>)
  (wrap-value (consume-node node))
  )

(dm consume-var-val (node|<list> => <vm-value>)
  (consume-list-def node)
  )

(dm consume-list-def (node|<list> => <vm-list>)
  (def nwl (new <vm-list>))
  (def l (fab <vec> 0))
  (set (val nwl) l)
  (for ((snode node))
    (add! l (wrap-value (consume-node snode)))
    )
  nwl
  )

(dm consume-env-def (node|<list> => <vm-env>)
  (def env (new <vm-env>))
  (do (fun (x)        
        (set (elt (env-bindings env) (1st x)) (consume-var-val (2nd x)))
        )
      node)
  env
  )

;; Mumblings:

;; Messages are just blocks too.
;; State is like a data segment, or alternatively init code that creates an env.
;;  or maybe a data segment but in the scheme frame model

;; Perhaps messages are like lambda's that float around.  If the goal is a count 
;;  of neighbors for example, we can think of the main code block having a 'neighbors' field.
;;  The message block is created, and inherits this value into its space.  So when we send
;;  our message, it consists of the code (increment neighbors), which goes over to all 
;;  the neighbors.  They receive it, and the code #1: finds the block if it is present;
;;  if not, it probably dies I guess.  #2: it increments the value.

;; The question is of course whether it's appropriate to try and create another crazy metaphor 
;;  here, especially when the behaviors are going to pretty obviously be quite consistent, and 
;;  to actually implement them via code would just be a waste.  The only reason for it would
;;  be if it greatly reduced the implementation complexity while not making debugging harder, 
;;  but I don't really see that right now.  Plus, this crazy metaphor is a departure from the
;;  experience I've already 

(export
  <vm-ast-node>

  <vm-env>

  <vm-value>
  <vm-int>
  <vm-bool>
  <vm-list>

  <vm-seq>
  
  <vm-immediate>
  <vm-binding>
  <vm-symbol>

  <vm-comparison-node>
  <vm-math-node>
  <vm-if-node>
  <vm-set-node>

  <vm-fun>
  <vm-sys-fun>
  <vm-user-fun>
  )

(export
  env-parent
  env-parent-setter

  env-bindings
  env-bindings-setter

  val
  val-setter

  immed-val
  immed-val-setter

  binding-sym
  binding-sym-setter

  operands
  operands-setter

  operator
  operator-setter

  op-left
  op-left-setter

  op-right
  op-right-setter

  test-node
  test-node-setter

  true-case
  true-case-setter

  false-case
  false-case-setter

  binding-name
  binding-name-setter

  binding-node
  binding-node-setter

  sys-fun
  sys-fun-setter

  user-fun
  user-fun-setter

  sym
  sym-setter
  )

(export
;;  $symbol-to-handler
  $vm-sys-env
  $vm-true
  $vm-false
  $null-vm-seq
  $vm-ast-true
  $vm-ast-false
  
 )

(export
  execute-node
  reg-handler
  consume-node
  consume-seq
  new-binding
  env-lookup
  env-find-binding
  env-set
  clone-env
  chain-envs
  consume-comparison
  consume-math
  consume-if
  consume-when
  consume-unless
  consume-set
  consume-top-level
  consume-env-def
  consume-appl
  consume-sym
  invoke-fun
  wrap-value
  unwrap
  immedify
  make-sys-fun
  vm-true?
  vm-false?
  )
