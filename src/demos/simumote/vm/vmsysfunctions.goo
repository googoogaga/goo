(use goo)
(use goo/random)

(use demos/simumote/vm/instructions)

(ds (defsf ,name ,params ,@body)
  `(set (elt (env-bindings $vm-sys-env) ,name)
        (make-sys-fun (fun ,params ,@body)))
  )

(defsf 'random (env|<vm-env> high-non-inclusive|<vm-int>)
       (def high (unwrap high-non-inclusive))
       (random high)
       )

(defsf 'random-range (env|<vm-env> low|<vm-int> high|<vm-int>)
       (def span (- (unwrap high) (unwrap low)))
       (+ (unwrap low) (random (+ 1 span)))
       )
;; Debuggy crap

(defsf 'print-num (env|<vm-env> num|<vm-int>)
       (post "Number: %=\n" (unwrap num))
       )

;; List crap
(defsf 'mem? (env|<vm-env> l|<vm-list> e|<vm-value>)
       (mem? (val l) e)
       )

(defsf 'len (env|<vm-env> l|<vm-list>)
       (len (val l))
       )

(defsf 'empty? (env|<vm-env> l|<vm-list>)
       (empty? (val l))
       )

(defsf 'add! (env|<vm-env> l|<vm-list> e|<vm-value>)
       (add! (val l) e)
       #t
       )

(defsf 'del! (env|<vm-env> l|<vm-list> e|<vm-value>)
       (set (val l)
            (packing 
                (for ((v (val l)))
                  (when (~= v e)
                    (pack v))
                  )))
       #t
       )

(defsf 'zap! (env|<vm-env> l|<vm-list>)
       (zap! (val l))
       #t
       )

(defsf 'elt (env|<vm-env> l|<vm-list> index|<vm-value>)
       (elt (val l) (unwrap index))
       )

(defsf 'elt-setter (env|<vm-env> newval|<vm-value> l|<vm-list> index|<vm-value>)
       (set (elt (val l) (unwrap index)) (unwrap newval))
       #t
       )

(defsf 'min-elt (env|<vm-env> l|<vm-list>)
       (def s-val #f)
       (for ((c-val (val l)))
         (def cu-val (unwrap c-val))
         (set s-val (or (and s-val (min s-val cu-val))
                        cu-val))
         )
       s-val
       )

(defsf 'max-elt (env|<vm-env> l|<vm-list>)
       (def s-val #f)
       (for ((c-val (val l)))
         (def cu-val (unwrap c-val))
         (set s-val (or (and s-val (max s-val cu-val))
                        cu-val))
         )
       s-val
       )

(defsf 'intersect! (env|<vm-env> vl1|<vm-list> vl2|<vm-list>)
       ;; All the bad naming of C
       ;; All the power of LISP.
       (def nl (vec))
       (def l1 (val vl1))
       (def l2 (val vl2))
       (do (fun (x)
             (when (any? (fun (y) (= x y)) l2)
               (add! nl x))
             )
           l1)
       (set (val vl1) nl)
       (not (empty? nl))
       )

(defsf 'intersect (env|<vm-env> vl1|<vm-list> vl2|<vm-list>)
       ;; All the bad naming of C
       ;; All the power of LISP.
       (def nl (vec))
       (def l1 (val vl1))
       (def l2 (val vl2))
       (do (fun (x)
             (when (any? (fun (y) (= x y)) l2)
               (add! nl x))
             )
           l1)
       nl
       )
