(use goo)

(use samurui/samurui)

(use samurui/extrinsic)

(use demos/simumote/motes)
(use demos/simumote/vm/instructions)
(use demos/simumote/vm/vm)
(use demos/simumote/simcode/round)

;; Main program

(dc <simumote> (<any>))

(dp! motes (<simumote> => <mote-ensemble>))
(dp! cur-round (<simumote> => <round>))

;;; Create the App
(dv *app* (new <simumote>))

(dv $num-motes 200)

;; Create the motes
(set (motes *app*) (mote-ensemble (make-motes $num-motes)))
(distribute-motes (motes *app*))

;; Create the first round.
(set (cur-round *app*) (new <round>))

;; ----- Interface Actions -----

(iaction <simumote> advance-round app "Advance Round"
         (process-round (cur-round app) (motes app))
         (set (cur-round app) (transition-round (cur-round app) (motes app)))
         )

(iaction <simumote> advance-five app "Advance 5"
         (for ((i (range 0 < 5)))
           (process-round (cur-round app) (motes app))
           (set (cur-round app) (transition-round (cur-round app) (motes app)))           
           )
         )

;; ----- Interface Models -----

(iview <sm-run-block>
       
       )

;; So how do we do this.  Ideally (coerce mote-run-blocks #SYMBOL#) would do it for us, but the potential bitch is that this is all inert data which can't be
 ;; resolved in this context unless we escape it.  Escape we shall I guess.

(df coerce-run-blocks-to-visi (rblocks)
  (post "Coercing: %=\n" rblocks)
  (visi-reversablize (vm-block-visi-col rblocks))
  )

(df nop-setter (x)
  )

(iview <mote>
       (coerce mote-id ,<str> ,to-str ,nop-setter)
       (attr (coerce mote-run-blocks ,<visi-col> ,coerce-run-blocks-to-visi ,nop-setter)
             fill
             scroll
             (prop-axes value))
       )

(iview <simumote>
       (attr (panes
              (master bob (attr motes
                                fill extrinsic
                                (fundamental motes) (x x) (y y)
                                (pre-overlays
                                 (circle (radius ,$mote-comm-radius))
                                 )
                                ))
              (slave bob)
              )
             fill)
       (columns
        advance-round
        advance-five
        )
       )
       
;; ----- App Go -----
(df go-simumote ()
  ;; Initialize all the code-block-states for all the motes

  (samurui-init)
  
  (present *app*)
  
  (samurui-go)
  )

;; ----- Helpers -------


;; Distribute code blocks!
(dm give-all (block-name|<sym>)
  (give-all-motes-instance (cur-round *app*) (motes (motes *app*)) (elt $vm-blocks block-name))
  )

(dm give-all (block-names|<col>)
  (do give-all block-names)
  )

(dv $main-rblock-name #f)

(df gimme-main-rblock (mote|<mote> => (t? <sm-run-block>))
  (mote-find-block-instance mote (elt $vm-blocks $main-rblock-name))
  )

(df lookup-var (rblock|(t? <sm-run-block>) varname|<sym> notfound|<any> => <any>)
  (if rblock
      (unwrap (env-lookup (run-state rblock) varname))
      notfound)
  )

(export
  go-simumote
  motes
  motes-setter
  cur-round
  cur-round-setter
  *app*
  $num-motes

  give-all
  $main-rblock-name
  gimme-main-rblock
  lookup-var
  )