(use goo)

(use goo/random)

(use demos/simumote/motes)
(use demos/simumote/vm/instructions)
(use demos/simumote/vm/vm)

;; Round abstraction.  Basically going with the standard distributed computing model
;;  more or less.  Every mote has an in-queue and an out-queue.  During each round, 
;;  motes process their in-queue, and leave things in their out-queue. In-between
;;  each round, we transfer from out-queues to in-queues, killing off collided
;;  messages with whatever degree of zest and accuracy we desire.

;; The round-env provides the relevant symbols to provide broadcast/etc.
(dv $round-env (new <vm-env>))

(dv $current-mote #f)
(dv $currently-executing-rblock #f)
(dv $current-out-queue #f)

(ds (defrf ,name ,params ,@body)
  `(set (elt (env-bindings $round-env) ,name)
        (make-sys-fun (fun ,params ,@body)))
  )

;; --- Broadcast Related ---

(defrf 'broadcast (env|<vm-env> symname|<vm-symbol>)
       (def instance (mote-find-block-instance $current-mote (elt $vm-blocks (sym symname))))
       (if instance
         (add! $current-out-queue (clone-run-block instance))
         (post "Crap, couldn't find instance of %= to broadcast\n" (sym symname)))
       #t
       )

(defrf 'broadcast-me (env|<vm-env>)
       (add! $current-out-queue (clone-run-block $currently-executing-rblock))
       #t
       )

;; --- Scheduling ---

(defrf 'schedule-me (env|<vm-env> ticks|<vm-int>)
       (set (run-ticks $currently-executing-rblock)
            (unwrap ticks))
       #t
       )

(defrf 'me-scheduled? (env|<vm-env>)
       (and (run-ticks $currently-executing-rblock)
            #t)
       )

(defrf 'schedule-other (env|<vm-env> symname|<vm-symbol> ticks|<vm-int>)
       (def instance (mote-find-block-instance $current-mote (elt $vm-blocks (sym symname))))
       (if instance
           (set (run-ticks instance) (unwrap ticks))
           (post "Crap, couldn't find instance of %= to schedule-other\n" (sym symname)))
       #t
       )

;; --- Block Information ---
(defrf 'block-present? (env|<vm-env> symname|<vm-symbol>)
       (def instance (mote-find-block-instance $current-mote (elt $vm-blocks (sym symname))))
       (if instance #t #f)
       )

;; --- Call ---
(defrf 'call (env|<vm-env> funcname|<vm-symbol>)
       ;; No need to save any of these values because their values won't actually change. (Same value)
       (exec-block-on-mote $currently-executing-rblock (sym funcname) $current-mote $current-out-queue #f)
       )

;; --- Call-Other ---
(defrf 'call-other (env|<vm-env> capsulename|<vm-symbol> funcname|<vm-symbol>)
       (def oth-rblock (mote-find-block-instance-by-name $current-mote (sym capsulename)))
       
       (when oth-rblock
         ;; Save the current rblock... (all others stay the same) (exec-block... does the mutation)
         (def saved-rblock $currently-executing-rblock)

         (exec-block-on-mote oth-rblock (sym funcname) $current-mote $current-out-queue #f)
         
         ;; Restore the current rblock
         (set $currently-executing-rblock saved-rblock)
         )
       (and oth-rblock #t)
       )


;; --- Mote Identity ---

(defrf 'mote-id (env|<vm-env>)
       (mote-id $current-mote)
       )

(dc <round> (<any>))
(dp! in-queues (<round> => <tab>) (fab <tab> 0))
(dp! out-queues (<round> => <tab>) (fab <tab> 0))

;; Process the old-round to make a new one.
(dm transition-round (old-round|<round> mote-ensemble|<mote-ensemble> => <round>)
  (def new-round (new <round>))

  ;; Message transmission and collisions should be simulated.
  ;; For now, things just do the standard circular distance
  (do (fun (mote-queue-tuple)
        (when (>= (len mote-queue-tuple) 2)
          (def mote (1st mote-queue-tuple))
          (def out-queue (2nd mote-queue-tuple))
          
          (do (fun (other-mote)
                (def in-queue (elt! (in-queues new-round) other-mote
                                    (fun () (vec))))

                (for ((rblock out-queue))
                  (add! in-queue (clone-run-block rblock)))
                )

              (motes-within-radius (motes mote-ensemble) mote $mote-comm-radius)
              )
          )
        )
      (items (out-queues old-round))
      )

  new-round
  )

(dm process-round (round|<round> da-motes|<mote-ensemble>)
  (post "<<<<< Round\n")
  (post "::: Inputs\n")
  (process-inputs round)
  (post "::: Ticks\n")
  (process-ticks round (motes da-motes))
  (post "::: Packups\n")
  (process-outgoing-packups round)
  (post ">>>>> Round\n")
  )

(dm process-outgoing-packups (round|<round>)
  ;; Iterate over the out-queues
  (do (fun (mote-queue-tuple)
        (when (>= (len mote-queue-tuple) 2)
          (def mote (1st mote-queue-tuple))
          (def out-queue (2nd mote-queue-tuple))
          
          (do (fun (rblock)
                (exec-block-on-mote rblock 'packup mote out-queue #f)
                )
              out-queue)
          )
        )
      (items (out-queues round))
      )
  )

(dm mote-find-block-instance (mote|<mote> block|<sm-code-block> => (t? <sm-run-block>))
  (esc found-it
    (do (fun (cur-run-block)
          (when (= (run-block cur-run-block) block)
            (found-it cur-run-block))
          )
        (mote-run-blocks mote)
        )
    )
  )

(dm mote-find-block-instance-by-name (mote|<mote> block-name|<sym> => (t? <sm-run-block>))
  ;; Look up the block from its name
  (def the-block (elt $vm-blocks block-name))
  (mote-find-block-instance mote the-block)
  )

;; Returns a list containing the runblock parents of the given run block...
;; Order is most ancient ancestor to immediate parent
(dm mote-find-parent-rblock-closure (mote|<mote> rblock|<sm-run-block> => <col>)
  (rep loop ((parents (tup)) (cur-rblock rblock))
    (if cur-rblock
        (loop (cat (tup (run-state cur-rblock)) parents)
              (and (block-parent (run-block cur-rblock))
                   (mote-find-block-instance mote (block-parent (run-block cur-rblock)))))
        parents
        )
    )
  )

(dm mote-all-rblock-parents-present? (mote|<mote> rblock|<sm-run-block> => <log>)
  (rep loop ((cur-rblock rblock))
    (if cur-rblock
        (seq
          (def parent-block (block-parent (run-block cur-rblock)))
          (if parent-block
              (seq
                (def parent-rblock 
                  (mote-find-block-instance mote parent-block))
                (when parent-rblock
                  (loop parent-rblock)))
              #t)
          )
        #t
        )
    )
  )

(dm give-all-motes-instance (round|<round> motes|<col> block|<sm-code-block>)
  (do (fun (mote)
        (give-mote-instance round mote block)
        )
      motes)
  )

(dm give-random-mote-instance (round|<round> motes|<col> block|<sm-code-block>)
  (def random-mote (elt motes (random (len motes))))
  (give-mote-instance round random-mote block)
  )

(dm give-mote-instance (round|<round> mote|<mote> block|<sm-code-block>)
  (def in-queue (or (elt-or (in-queues round) mote #f)
                    (set (elt (in-queues round) mote) (vec))))
  
  (def rblock (new <sm-run-block>))
  (set (run-block rblock) block)
  (set (run-state rblock) (clone-env (block-env block)))
  
  (add! in-queue rblock)
  )

(dm process-inputs (round|<round>)
  ;; When processing the incoming code blocks:
  ;; - Check if the block is enclosed; if so:
  ;;  - Make sure the parent code block is present
  ;;  - Grab the parent's state block too, to pass in on the call
  ;; - Call into the block.

  (do (fun (mote-queue-tuple)
        (def mote (1st mote-queue-tuple))
        (def in-queue (2nd mote-queue-tuple))
        
        (set $current-mote mote)

        (def out-queue (vec))

        (set $current-out-queue out-queue)

        ;; Input is a run-block
        (do (fun (rblock)
              ;; Check if it's a collision...
              ;; [in case of collision, we must execute the 'collide function.
              ;;  this requires slightly special semantics.]
              (def other-guy (mote-find-block-instance $current-mote (run-block rblock)))
              (if other-guy
                  (seq
                    ;; Collision!
                    (def my-env (run-state rblock))
                    (def oth-env (run-state other-guy))
                    
                    (def winner
                      (if (block-has-func-named? rblock 'collide)
                          ;; Has a collide function, bring it.
                          (seq
                            (def coll-result 
                              (exec-block-on-mote rblock 'collide mote out-queue
                                                  `((me ,my-env) (other ,oth-env))))
                            (if (== coll-result my-env)
                                rblock
                                other-guy)
                            )
                          ;; No collide function, we win!
                          rblock
                          ))

                    ;; New guy won?
                    (when (== winner rblock)
                      ;; Kill other guy (del-vals! currently is equivalent to del-vals, so
                      ;;  I must use my little ugly work-around here.)
                      (set (mote-run-blocks mote) (del-vals (mote-run-blocks mote) other-guy))
                      
                      ;; Run init!
                      (exec-block-on-mote rblock 'init mote out-queue #f)
                      
                      ;; Add to run-blocks
                      (add! (mote-run-blocks mote) rblock)
                      )
                    ;; (If old guy won, nothing is to be done.)
                    )
                  (seq
                    ;; Not a collision!
                    (exec-block-on-mote rblock 'init mote out-queue #f)
                    
                    (add! (mote-run-blocks mote) rblock)
                    )
                  )
              )
            in-queue)

        ;; Save the output queue
        (set (elt (out-queues round) mote) out-queue)
        )
      (items (in-queues round))
      )
  )


(dm populate-env (env|<vm-env> population|(t? <col>))
  (when population
    (do (fun (sym-pair)
          (set (elt (env-bindings env) (1st sym-pair)) (2nd sym-pair))
          )
        population)
    )
  )

(dm block-has-func-named? (block|<sm-code-block> func-sym-name|<sym> => <log>)
  (and (elt-or (block-funcs block) func-sym-name #f) #t)
  )

(dm block-has-func-named? (rblock|<sm-run-block> func-sym-name|<sym> => <log>)
  (and (elt-or (block-funcs (run-block rblock)) func-sym-name #f) #t)
  )

(dm exec-block-on-mote (rblock func-sym-name mote out-queue local-vars)
  (def block (run-block rblock))
  
  ;; Set up relevant globals
  (set $current-mote mote)
  (set $current-out-queue out-queue)
  (set $currently-executing-rblock rblock)

  ;; Does the block have a parent?
  (if (block-parent block)
      ;; Parent
      (seq
        ;; We have a parent, make sure all ancestors are present!
        (when (mote-all-rblock-parents-present? $current-mote rblock)
          ;; Configure environment chain.
          ;; (system round (parents...) rblock local-for-defs)
          (def local-env (new <vm-env>))
          (populate-env local-env local-vars)

          (def my-env (chain-envs (cat (tup $vm-sys-env $round-env)
                                       (mote-find-parent-rblock-closure $current-mote rblock)
                                       (tup local-env))))
          ;; Call
          (execute-node my-env (block-get-func block func-sym-name))
          )
        )
      ;; No Parent
      (seq
        (def local-env (new <vm-env>))
        (populate-env local-env local-vars)

        (def my-env (chain-envs (vec $vm-sys-env $round-env (run-state rblock) local-env)))
        (execute-node my-env (block-get-func block func-sym-name))
        )
      )
  )

;; Tick-processing works on the following premise:
;; - All motes have a list of code-blocks that have requested to be executed again
;;    in so many rounds.  We just fulfill this request.
(dm process-ticks (round|<round> motes|<col>)
  (do (fun (mote)
        (set $current-mote mote)
        (do (fun (rblock)
              (when (run-ticks rblock)
                (decf (run-ticks rblock))
                (when (<= (run-ticks rblock) 0)
                  ;; Set ticks to #f now then. It can change if desired.
                  (set (run-ticks rblock) #f)

                  (def out-queue (or (elt-or (out-queues round) mote #f)
                                     (set (elt (out-queues round) mote) (vec))))

                  (set $currently-executing-rblock rblock)
                  (set $current-out-queue out-queue)
                  
                  (exec-block-on-mote rblock 'tick mote out-queue #f)
                  )
                )
              )
            (mote-run-blocks mote)
            )
        )
      motes
      )
  )

;; There are several ways that the tick mechanism could work.
;; 1] Every block actually has an init segment and a tick-segment.  The init segment
;;     handles the on-arrival code, and then also schedules the tick-segment.
;; 2] There is only one segment, but we pass in a variable that indicates what 
;;     behavior is desired to be exercised.  As in #1, init requests a tick.
;; 3] Passive data mechanism where an attribute on the packet says how many ticks
;;     until it is executed.

(export
  <round>
  )

(export
  in-queues
  in-queues-setter

  out-queues
  out-queues-setter
  )

(export
  transition-round
  process-round
  mote-find-block-instance
  give-all-motes-instance
  give-random-mote-instance
  process-inputs
  process-ticks
  )