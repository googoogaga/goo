(use runtime/boot)
(use goo/macros)
(use goo/type)
(use goo/math)
(use goo/collections/collection)
(use goo/collections/map)
(use goo/collections/sequence)
(use goo/collections/list)

;; 3.7.2.1 ASSOCIATIONS

;;;;!! Interface
(exported
 (dc <assocs> (<map>))
   (dp assocs-test (x|<assocs> => <fun>) ==)
)

;;;;!! Implementation
  (dp assocs-keys (x|<assocs> => <lst>) '())
  (dp assocs-vals (x|<assocs> => <lst>) '())

;;;; Collection protocol
(dm len (x|<assocs> => <int>)
  (len (assocs-keys x)))

(dm elt-or (x|<assocs> key default => <any>)
  (rep fnd ((keys|<lst> (assocs-keys x)) (vals|<lst> (assocs-vals x)))
    (if (== keys '())
        default
        (if ((assocs-test x) key (head keys))
            (head vals)
            (fnd (tail keys) (tail vals))))))

(dm elt-setter (val x|<assocs> key)
  (rep fnd ((keys|<lst> (assocs-keys x)) (vals|<lst> (assocs-vals x)))
    (if (== keys '())
        (seq (set (assocs-keys x) (pair key (assocs-keys x)))
             (set (assocs-vals x) (pair val (assocs-vals x)))
          val)
        (if ((assocs-test x) key (head keys))
            (set (head vals) val)
            (fnd (tail keys) (tail vals))))))

(dm fab ((c (t= <assocs>)) s|<int> => <assocs>)
  (new <assocs>))


