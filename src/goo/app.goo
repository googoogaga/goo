(use boot)
(use macros)
(use proto/collections/collection)

(df napp (proc|<fun> nexts args|...)
  (def ilen       (@+ (@olen args) -1))
  (def lelt       (@oelt args ilen))
  (def tlen       (@+ ilen (len lelt)))
  (def stackspace (%lb (%allocate-stack (%i+ (%raw 2) (%iu tlen)))))
  (def argend     (%sp-reg))
  (rep loop1 ((i 0))
    (def top (@+ tlen -1))
    (when (@< i ilen)
      (set (%loc-off stackspace (%i- (%iu top) (%iu i))) (@oelt args i))
      (loop1 (@+ i 1))))
  (rep loop2 ((s (enum lelt)) (i (@+ 1 ilen)))
    (unless (fin? s)
      (set (%loc-off stackspace (%i- (%iu tlen) (%iu i))) (now s))
      (loop2 (nxt s) (@+ i 1))))
  (set (%loc-off stackspace (%iu tlen)) (%iu tlen))
  (set (%loc-off stackspace (%i+ (%raw 1) (%iu tlen))) proc)
  (set (%sp-reg) argend)
  (%check-call-types)
  (%raw-call proc nexts))

