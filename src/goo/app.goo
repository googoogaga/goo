;;;; Copyright 2002, Jonathan Bachrach.  See file TERMS.

(use goo/boot)
(use goo/macros)
(use goo/cols/col)

(df napp (proc|<fun> nexts args|...)
  (def ilen       (@+ (@olen args) -1))
  (def lelt       (@oelt args ilen))
  (def lelt-opts? (@== (%class-of lelt) <opts>))
  (def tlen       (@+ ilen (if lelt-opts? (@olen lelt) (len lelt))))
  (def stackspace (%lb (%allocate-stack (%i+ (%raw 2) (%iu tlen)))))
  (def argend     (%sp-reg))
  (rep loop1 ((i 0))
    (def top (@+ tlen -1))
    (when (@< i ilen)
      (set (%loc-off stackspace (%i- (%iu top) (%iu i))) (@oelt args i))
      (loop1 (@+ i 1))))
  (if lelt-opts?
      (rep loop2 ((j 0) (i (@+ 1 ilen)))
        (unless (@== j tlen)
          (set (%loc-off stackspace (%i- (%iu tlen) (%iu i))) (@oelt lelt j))
          (loop2 (@+ j 1) (@+ i 1))))
      (rep loop2 ((s (enum lelt)) (i (@+ 1 ilen)))
        (unless (fin? s)
          (set (%loc-off stackspace (%i- (%iu tlen) (%iu i))) (now s))
          (loop2 (nxt s) (@+ i 1)))))
  (set (%loc-off stackspace (%iu tlen))                (%iu tlen))
  (set (%loc-off stackspace (%i+ (%raw 1) (%iu tlen))) proc)
  (set (%sp-reg)                                       argend)
  (%check-call-types)
  (%raw-call proc nexts))

