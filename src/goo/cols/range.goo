(use goo/boot)
(use goo/macros)
(use goo/runtime)
(use goo/types)
(use goo/math)
(use goo/cols/col)
(use goo/cols/seq)
;; 3.7.6 RANGES

;;;;!! Interface
(exported
 ;;  represents series of numbers
 (dc <range> (<seq>))
 (dg range (from|<num> done?|<fun> lim|<num> => <range>))
 (dg range-by (from|<num> done?|<fun> lim|<num> nxt|<fun> => <range>))
 (dg from (from|<num> => <range>))
 (dg below (from|<num> => <range>))
)

;; TODO: FEWER PROPS
(dp range-from (x|<range> =>  <num>)     0)
(dp range-in?  (x|<range> =>  <fun>)     <) 
(dp range-lim  (x|<range> => (t? <num>)) #f) 
(dp range-nxt  (x|<range> => <fun>)      1+) 

(dm fab ((c (t= <range>)) s|<int> => <range>)
  (range 0 < s 1+))

(dm range (from|<num> in?|<fun> lim|<num> => <range>)
  (new <range> range-from from range-in? in? range-lim lim))

(dm range-by (from|<num> in?|<fun> lim|<num> nxt|<fun> => <range>)
  (new <range> range-from from range-in? in? range-lim lim range-nxt nxt))

(dm from (from|<num> => <range>)
  (new <range> range-from from range-in? (always #t)))

(dm below (lim|<num> => <range>)
  (new <range> range-lim lim))

(dm as-copy (c|<range> x|<col> => <col>)
  (as <lst> x))

(dc <range-enum> (<enum>))
(dp %dat (x|<range-enum> => <range>))
(dp %val (x|<range-enum> => <num>))

(dm enum (x|<range> => <range-enum>) 
  (new <range-enum> %dat x %val (range-from x)))
(dm fin? (e|<range-enum> => <log>)       
  (def c (%dat e))
  (not ((range-in? c) (%val e) (range-lim c))))

(dm nxt (e|<range-enum> => <range-enum>)  
  (renew e %val ((range-nxt (%dat e)) (%val e))
         ))
(dm now (e|<range-enum> => <num>)         
  (%val e))
