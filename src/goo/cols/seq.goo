(use boot)
(use macros)
(use proto/math)
(use proto/types)
(use proto/collections/collection)

;; 3.7.3 SEQUENCES

;;;;!! Interface
(exported
 ;; defined in boot
 <seq>
 
 ;; NYI EXCEPT FOR LISTS
 (dg add ((x <seq>) (y <any>) => <seq>))
 
 ;; == (elt x 0)
 (dg 1st ((x <seq>) => <any>))

 ;; == (elt x 1)
 (dg 2nd ((x <seq>) => <any>))

 ;; == (elt x 2)
 (dg 3rd ((x <seq>) => <any>))

 ;; == (elt x (- (len x) 1))
 (dg last ((x <seq>) => <any>))

 ;; finds position of v in x else returns nul.
 (dg pos ((x <seq>) (v <any>) => <any>)) ;; TODO: (false-or <int>)

 ;; returns reversed sequence.
 (dg rev ((x <seq>) => <seq>))

 ;; returns destructively reversed sequence.
 (dg rev! ((x <seq>) => <seq>))

 ;; returns concatenated sequences.
 (dg cat ((x <seq>) (more ...) => <seq>))

 ;; returns destructively concatenated sequences.
 (dg cat! ((x <seq>) (more ...) => <seq>))

 ;; returns two sequences concatenated.
 (dg cat2 ((x <seq>) (y <seq>) => <seq>))

 ;; subsequence of x between from and below.
 (dg sub ((x <seq>) (from <int>) (below <int>) => <seq>))

 ;; replaces subsequence in range between from and below of dst with
 ;; contents of src.
 (dg sub-setter ((dst <seq>) (src <seq>) (from <int>) (below <int>)))

 ;; returns new sequence with elements corresponding to those where test
 ;; returns non-false.
 (dg pick ((test <fun>) (x <seq>) => <seq>))

 ;; returns sequence with all v's deleted from x.
 (dg del ((x <seq>) (v <any>)  => <seq>))

 ;; returns sequence with all duplicates removed.
 (dg del-dups ((x <seq>) => <seq>))


;; UNDOCUMENTED:
 (df range-check ((x <seq>) (i <int>)))

 (df range-check? ((x <seq>) (i <int>)))
 (df range-error ((x <seq>) (i <int>)))
 (dg vals-to-str ((s <seq>) => <str>))
 (dg add! ((c <seq>) x => <seq>))
 (dg do-key-vals ((fn <fun>) (key-vals <seq>)))
)

;;;;!! Implementation

;;;; Creation protocol
(dm as ((d (t< <seq>)) (s <seq>) => <seq>)
  (alter (fab d (len s)) s))

;;;; Collection protocol

(dm alter ((dst <seq>) (src <seq>) => <seq>)
  (rep in ((ds (ini-state dst)) (ss (ini-state src)))
    (if (if (fin-state? dst ds) #t (fin-state? src ss))
        dst
        (seq (set (now-elt dst ds)  (now-elt src ss))
             (in (nxt-state dst ds) (nxt-state src ss))))))

;;;; Sequence protocol

(dm 1st ((x <seq>) => <any>) (elt x 0))

(dm 2nd ((x <seq>) => <any>) (elt x 1))

(dm 3rd ((x <seq>) => <any>) (elt x 2))

;; TODO: SHOULD USE BACKWARD ITERATION PROTOCOL???
(dm last ((x <seq>) => <any>) (elt x (- (len x) 1)))

(dm pos ((x <seq>) v => <any>) ;; TODO: (false-or <int>)
  (find-key (fun (a) (== v a)) x))

(dm rev ((x <seq>) => <seq>)
  (rep con ((seq '()) (sta (ini-state x)))
    (if (fin-state? x sta)
        (as-copy x seq)
        (con (add seq (now-elt x sta)) (nxt-state x sta)))))

;; required: rev!

(dm cat ((x <seq>) (ss ...) => <seq>)
  (reduce cat2 x ss))

(dm cat! ((x <seq>) (more ...) => <seq>)
  (apply cat x more))

(dm cat2 ((x <seq>) (y <seq>) => <seq>)
  (rep con-x ((seq '()) (sta (ini-state x)))
    (if (fin-state? x sta)
        (rep con-y ((seq seq) (sta (ini-state y)))
          (if (fin-state? y sta)
              (as-copy x (rev! seq))
              (con-y (add seq (now-elt y sta)) (nxt-state y sta))))
        (con-x (add seq (now-elt x sta)) (nxt-state x sta)))))

(dm sub ((x <seq>) (from <int>) (below <int>) => <seq>)
  (rep con-x ((seq '()) ((i <int>) 0) (sta (ini-state x)))
    (if (fin-state? x sta)
        (as-copy x (rev! seq))
        (con-x (if (if (>= i from) (< i below)) (add seq (now-elt x sta)) seq)
               (+ i 1) (nxt-state x sta)))))

(dm sub-setter
    ((src <seq>) (dst <seq>) (from <int>) (below <int>) => <seq>)
  (let (((dst-len <int>) (len dst))
        ((src-len <int>) (len src))
        ((del-len <int>) (- below from)))
    (if (= del-len src-len) ;;  Can modify in place?
        (rep find ((ds (ini-state dst)) (i 0))
          (if (= i from)
              (rep in ((ds ds) (ss (ini-state src)))
                (if (fin-state? src ss)
                    dst
                    (seq (set (now-elt dst ds)  (now-elt src ss))
                         (in (nxt-state dst ds) (nxt-state src ss)))))
              (find (nxt-state dst ds) (+ i 1))))
        ;; Don't know if dst is stretchy so we have to create a new one
        (let ((new-len (+ (- dst-len del-len) src-len))
              (ndst    (fab (object-class dst) new-len)))
          (rep copy ((nds (ini-state ndst)) (ds (ini-state dst)) (i 0))
            (if (= i from)
                (rep insert ((nds nds) (ss (ini-state src)))
                  (if (fin-state? src ss)
                      (rep skip ((ds ds) (i from))
                        (if (= i below)
                            (rep onto ((nds nds) (ds ds) (i below))
                              (if (= i dst-len)
                                  ndst
                                  (seq (set (now-elt ndst nds) (now-elt dst ds))
                                       (onto (nxt-state ndst nds)
                                             (nxt-state dst ds) (+ i 1)))))
                            (skip (nxt-state dst ds) (+ i 1))))
                      (seq (set (now-elt ndst nds) (now-elt src ss))
                           (insert (nxt-state ndst nds) (nxt-state src ss)))))
                (seq (set (now-elt ndst nds) (now-elt dst ds))
                     (copy (nxt-state ndst nds) (nxt-state dst ds) 
                           (+ i 1)))))))))

(dm pick ((test <fun>) (x <seq>) => <seq>)
  (rep con ((seq '()) (sta (ini-state x)))
    (if (fin-state? x sta)
        (as-copy x seq)
        (let ((e (now-elt x sta)))
          (con (if (test e) (add seq e) seq) (nxt-state x sta))))))

(dm del ((s <seq>) x => <seq>)
  (pick (fun (e) (~== e x)) s))

(dm del-dups ((x <seq>) => <seq>)
  (as-copy x (rev! (reduce (fun (s e) (if (mem? s e) s (pair e s))) '() x))))


;;;; Undocumented

(dm keys ((d <seq>) => <seq>)
  (from-below 0 (len d)))

(df range-error ((x <seq>) (i <int>))
  ;; TODO: REAL CONDITION
  (error "RANGE ERROR %= %=" x i))

(df range-check ((x <seq>) (i <int>))
  (when (or (< i 0) (>= i (len x)))
    (range-error x i)))

(df range-check? ((x <seq>) (i <int>))
  (and (>= i 0) (< i (len x))))

(dm add-new ((c <seq>) x => <seq>)
  (unless (mem? c x) (add c x)) 
  c)

(dm add! ((c <seq>) x => <seq>)
  (add c x))

;; TODO: DEPRECATED
(dm into ((dst <seq>) (src <seq>) (from <int>) (below <int>) => <seq>)
  (rep in ((ds (ini-state dst)) (ss (ini-state src)))
    (if (if (fin-state? dst ds) #t (fin-state? src ss))
        dst
        (seq (set (now-elt dst ds)  (now-elt src ss))
             (in (nxt-state dst ds) (nxt-state src ss))))))


(dm vals-to-str ((s <seq>) => <str>)
  (reduce (fun (s e) (cat s (if (empty? s) "" " ") (to-str e))) "" s))

(dm do-key-vals ((fn <fun>) (key-vals <seq>))
  (rep rep ((s (ini-state key-vals)))
    (unless (fin-state? key-vals s)
      (let ((key (now-elt key-vals s))
            (nxts (nxt-state key-vals s))
            (val (if (fin-state? key-vals s)
                     #f
                     (now-elt key-vals nxts))))
        (fn key val)
        (rep (nxt-state key-vals nxts))))))

;; from range.proto
(need-implementation from-below)