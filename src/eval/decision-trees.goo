(use runtime/boot)
(use goo)
(use runtime/runtime)
(use goo/collections/priority-queue)
(use compiler/ast)
(use compiler/top)

;;; TODO:
;;; x WALK ALL BINDINGS
;;; x NEED LITERALS VECTOR IN GEN -- METS, NXT-METS, TYPES
;;; x NEXT-METHODS TRACKING
;;; o DEPENDENCY TRACKING
;;;     just use current system
;;; o FAST ISA?
;;;     bit matrix algorithm
;;;       class numbering
;;;       fixed vectors
;;;       class vector
;;;     other types
;;;       t< -- straight subclass using bitmatrix
;;;       t= -- code gen
;;;       t+ -- code gen
;;; o COMMON SUBEXPRESSION ELIMINATION
;;;     hoist object-class
;;; o DYNAMIC COMPILATION
;;;     compile expression as in top
;;;     circumvent module system

(df walk-bindings (fun|<fun> mod|<sym>)
  (walk-bindings* 
   fun (runtime-environment mod) (fab <tab> 1000) (fab <tab> 10)))

(df walk-bindings* 
    (f|<fun> env|<static-global-environment> walked?|<tab> mods|<tab>)
  (for ((mod (environment-uses-modules env)))
    (unless (elt-or mods mod #f)
      (set (elt mods mod) #t)
      (walk-bindings* f (runtime-environment (module-name mod)) walked? mods)))
  (for ((b (environment-bindings env)))
    (unless (elt-or walked? b #f)
      (set (elt walked? b) #t)
      (f b))))
  
(df fun-spec (x|<fun> i|<int> => <type>)
  (elt (fun-specs x) i))

(dm build-decision-tree (g|<gen>)
  (def refs   (fab <buf> 0))
  (def code   (build-decision-tree* g 0 (len (fun-specs g)) refs (fun-mets g)))
  (def dname  (cat-sym (fun-name g) "-dispatch"))
  (def dfun   `(df ,dname (args|...) 
                 (let ((g (%fun-reg)) (refs (%gen-refs g))) ,code)))
  (def dpatch `(set (%gen-code ,(fun-name g)) (%met-code ,dname)))
  (def top    `(seq ,dfun ,dpatch #t))
  (set (gen-refs g) (as <vec> refs))
  top)

(dm build-decision-tree* (g|<gen> i|<int> n|<int> refs|<buf> mets|<lst>)
  (loc ((gen-ref (x) 
          (def i (or (pos refs x) (seq (add! refs x) (- (len refs) 1))))
          `(%velt refs (%iu ,i))))
    (if (< i n)
        (loc ((test (x y) (subtype?  (fun-spec x i) (fun-spec y i))))
          (def ordered-mets (priority-order test mets))
          (loc ((filter (mets type pos)
                  (priority-order test 
                    (pick (fun (met) (subtype? type (fun-spec met pos))) 
                          mets)))
                  (code-gen-case (m mets)
                    (def type (fun-spec m i))
                    `((,(gen-ref type))
                      ,(build-decision-tree*
                        g (+ i 1) n refs (filter mets type i))))
                  (code-gen-cases (mets)
                    (collecting ()
                      (rep loop ((mets mets))
                        (unless (empty? mets)
                          (collect (code-gen-case (head mets) mets))
                          (loop (tail mets)))))))
              `(case-by (@oelt args ,i) @isa?
                 ,@(code-gen-cases ordered-mets)
                 (#t (no-app-met ,(gen-ref g) args))))))
        `(seq (%unlink-stack)
              (%raw-call ,(gen-ref (head mets)) ,(gen-ref (tail mets))))))

(dm foo ((x <num>)) (vec x)) 
(dm foo ((x <flo>)) (lst x))
(dm foo ((x <int>)) x)

;; (seq (set write:*max-print-depth* 100) (set write:*max-print-length* 100))

(dv d (build-decision-tree foo))

;;; (auto-eval d (runtime-environment 'goo/user))
    

