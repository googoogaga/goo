;;;; Copyright (c) 2001 Jonathan Bachrach

(dm write ((out <output-port>) (x <global-binding>))
  (format out "GB_%s" (binding-name x)))

(dm write ((out <output-port>) (x <predefined-binding>))
  (format out "PB_%s" (binding-name x)))

(dm write ((out <output-port>) (x <local-binding>))
  (format out "LB");
  (when (binding-mutable? x)
    (format out "M"))
  (when (binding-dotted? x)
    (format out "D"))
  (format out "_%s" (binding-name x)))

(dm write ((out <output-port>) (x <magic-binding>))
  (format out "MK_%s" (binding-name x)))

(dm write ((out <output-port>) (x <local-reference>))
  (format out "LR^%s" (reference-binding x)))

(dm write ((out <output-port>) (x <global-reference>))
  (format out "GR^%s" (reference-binding x)))

(dm write ((out <output-port>) (x <predefined-reference>))
  (format out "PR_%s" (reference-binding x)))

(dm write ((out <output-port>) (x <local-assignment>))
  (format out "(SET %= %=)" (assignment-reference x) (assignment-form x)))

(dm write ((out <output-port>) (x <global-assignment>))
  (format out "(SET %= %=)" (assignment-binding x) (assignment-form x)))

(dm write ((out <output-port>) (x <definition>))
  (format out "(DEF %= %=)" (assignment-binding x) (assignment-form x)))

(dm write ((out <output-port>) (x <ast-function>))
  (format out "(%s " (function-kind x))
  (print-list (function-bindings x) out)
  (format out " %=)" (function-body x)))

(dm write ((out <output-port>) (x <alternative>))
  (format out "(IF %= %= %=)" 
	  (alternative-condition x) 
	  (alternative-consequent x) 
	  (alternative-alternant x)))

(dm do-write-list 
    ((out <output-port>) x (prefix <str>) (suffix <str>) do-first? print)
  (format out prefix)
  (rep loop ((x x) (first? #t))
    (unless (empty? x)
      (when (or (not do-first?) (not first?)) (format out " "))
      (print out (head x))
      (loop (tail x) #f)))
  (format out suffix))

(dm write ((out <output-port>) (x <sequential>))
  (write-list out "(SEQ" ")" #f write))

(dm write ((out <output-port>) (x <constant>))
  (format out "C(%=)" (constant-value x)))

(dm write ((out <output-port>) (x <regular-application>))
  (format out "(%=%=)" (application-function x) (application-arguments x)))

(dm write ((out <output-port>) (x <predefined-application>))
  (format out "(%=%=)" (application-binding x) (application-arguments x)))

(dm write ((out <output-port>) (x <fix-let>))
  (format out "(LET ")
  (write-list out (map list (fix-let-bindings x) (fix-let-arguments x)) write))
  (format s " %s)" (fix-let-body x)))

(dm write ((out <output-port>) (x <argument-list>))
  (write-list out x "" "" #f))

(dm write-list ((out <output-port>) (x <list>) write)
  (do-write-list out x "(" ")" #t write))

(dm write ((out <output-port>) (x <locals>))
  (format out "(LOC ")
  (write-list 
    out (map list (locals-bindings x) (locals-functions x)) write-list)
  (format out " %=)" (locals-body x)))

(dm write ((out <output-port>) (x <bind-exit>))
  (format out "(BLK %=)" (bind-exit-main-fun x)))

(dm write ((out <output-port>) (x <unwind-protect>))
  (format out "(UNWIND-PROTECT %= %=)" 
	  (unwind-protect-protected-thunk x) (unwind-protect-cleanup-thunk x)))

(dm write ((out <output-port>) (x <monitor>))
  (format out "(MON %= %=)" (monitor-handler x) (monitor-main-thunk x)))

(dm write ((out <output-port>) (x <static-environment>))
  (format out "(ENV LOCS: (")
  (rep loc-loop ((x x) (first? #t))
    (if (isa? x <static-global-environment>)
        (seq (format out ") GLOS: (")
	     (rep glo-loop ((x (environment-next x)) (first? #t))
               (if (or (== x #f) (isa? x <static-empty-environment>))
                   (format out "))")
	           (seq (unless first? (format out " "))
                        (format out "%=" (environment-binding x))
                        (glo-loop (environment-next x) #f)))))
        (seq (unless first? (format out " "))
             (format out "%=" (environment-binding x))
             (loc-loop (environment-next x) #f)))))

(dm write ((out <output-port>) (x <free-environment>))
  (write-list out x "(" ")" #t))

(dm write ((out <output-port>) (x <closure-creation>))
  (format out "CC-%=(B %= F %=)" 
          (closure-creation-index x) (closure-creation-bindings x)
          (closure-creation-free x)))

(dm write ((out <output-port>) (x <quotation-binding>))
  (format out "QB(%= %=)" (binding-name x) (binding-value x)))

(dm write ((out <output-port>) (x <top-level-form>))
  (format out "FRM(PG %= QS %= DS %=)" 
          (form-program x) (form-quotations x) (form-definitions x)))

(dm write ((out <output-port>) (x <flattened-program>))
  (format out "PG(FM %=\n   QS %=\n   DS %=)" 
          (program-form x) (program-quotations x) (program-definitions x)))

(dm write ((out <output-port>) (x <free-reference>))
  (format out "FR^%s" (reference-binding x)))

(dm write ((out <output-port>) (x <box-creation>))
  (format out "BC(%=)" (box-reference x)))

(dm write ((out <output-port>) (x <box-read>))
  (format out "BR(%=)" (box-reference x)))

(dm write ((out <output-port>) (x <box-write>))
  (format out "BW(%= %=)" (box-reference x) (box-form x)))

(dm function-kind ((x <function-definition>))
  (format-to-string "FD-%=" (function-index x)))

(dm function-kind ((x <flat-function>))
  "FFN")

(dm function-kind ((x <primitive-definition>))
  (format-to-string "PD-%=" (function-name x)))
