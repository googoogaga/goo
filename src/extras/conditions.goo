(def *current-handlers* '())

(def <handler> (isa <any>))
  (dp handler-function (x|<handler> => <fun>))

(dm default-handler (c|<condition>)
  #f)

(df fab-handler (f)
  (isa <handler> (set handler-function f)))

(df handler-matches? (handler condition)
  #t)

(df %with-exception (handler main-fun)
  (blk _unwind-exception_
    (def _original-handlers_ *current-handlers*)
    (loc ((_handler-function_ (condition _next-handler_)
             (set *current-handlers* _original-handlers_)
             (blk _resume_
	       (handler condition _resume_)
               (_next-handler_))))
      (set *current-handlers*
           (pair (fab-handler _handler-function_) *current-handlers*))
      (cln (main-fun) (set *current-handlers* _original-handlers_)))))

(df %sig (condition)
  (itr search ((handlers *current-handlers*))
    (if (empty? handlers)
	(default-handler condition)
	(let ((handler (head handlers))
              (remaining (tail handlers)))
	  (if (handler-matches? handler condition)
	      ((handler-function handler)
	       condition (fun () (search remaining)))
	      (search remaining))))))

