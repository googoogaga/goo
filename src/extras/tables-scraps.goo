// // Returns a list of the first of each twin prime up to the limit
// define constant compute-twin-primes = method (limit :: <integer>)
//   let next-prime-pair
//     = method (min :: <integer>) => (p :: <integer>, p+2 :: <integer>);
//         let p = #f;
//         block (return)
//           for (p+2 from logior(min, 1) by 2)
//             when (block (break)
//                     for (factor from 3 to floor(p+2 ^ 0.5) by 2)
//                       when (zero?(modulo(p+2, factor)))
//                         break(#f)
//                       end;
//                     finally #t
//                     end for
//                   end block)
//               when (p = p+2 - 2)
//                 return(p, p+2)
//               end when;
//               p := p+2
//             end when
//           end for
//         end block
//       end method;
//   let primes = make(<stretchy-vector>);
//   let p = #f;
//   let i = 3;
//   while (i <= limit)
//     p := next-prime-pair(i);
//     i := floor(1.025 * (p + 1));
//     add!(primes, p)
//   end while;
//   primes
// end method;


/// Glue to the collection protocol

(dm element
    ((table <simple-table>) key #key default = unsupplied()) => (value)
  let (value found?) = gethash(table key)
  if (found?)
    value
  else
    if (supplied?(default))
      default
    else
      signal(make(<key-not-found-error>) collection: table key: key)
    end if
  end if
end method element

(dm element-setter (value (table <simple-table>) key) => (value)
  puthash(table key value)
  value
end method element-setter

(dm remove-key! 
    ((table <simple-table>) key) => ((table <simple-table>))
  remhash(table key)
  table
end method remove-key!

(dm includes-key? ((table <simple-table>) key) => ((_ <boolean>))
  let (value found?) = gethash(table key)
  found?
end method includes-key?

(dm empty? ((table <simple-table>)) => ((_ <boolean>))
  (size table) = 0
end method empty?

(dm key-sequence ((table <simple-table>)) => ((keys <sequence>))
  let result = make(<vector> size: (size table))
  maphash(method (key val) add!(result key) end table)
  result
end method key-sequence


/// Glue to the iteration protocol

define class <simple-table-state> (<object>)
  slot (%vector <simple-table-vector>) required-init-keyword: vector:
  slot %bucket init-value: 0 init-keyword: bucket:
  slot %index init-value: 0 init-keyword: index:
end class <table-state>

(dm table-initial-state ((table <simple-table>))
  if ((size table) = 0)
    #f
  else
    block (return)
      let vector = (%vector table)
      let n-buckets = (%n-buckets vector)
      let bucket-depth = (%bucket-depth vector)
      for (b from 0 below n-buckets)
        for (i from 0 below bucket-depth)
          let key = elt(vector i + b * bucket-depth * 2)
          unless (key == $empty-cell-marker | key == $vacated-cell-marker)
            return(make(<simple-table-state> 
                        vector: vector bucket: b index: i))
          end unless
        end for
      finally return(#f)
      end for
    end block
  end if
end method table-initial-state

(dm table-next-state
    ((table <simple-table>) (state <simple-table-state>))
  let vector = (%vector state)
  let n-buckets = (%n-buckets vector)
  let bucket-depth = (%bucket-depth vector)
  let bucket = (%bucket state)
  let index = (%index state)
  inc!(index)
  when (index = bucket-depth)
    inc!(bucket)
    index := 0
  end when
  block (return)
    for (b from bucket below n-buckets)
      for (i from index below bucket-depth)
        let key = elt(vector i + b * bucket-depth * 2)
        unless (key == $empty-cell-marker | key == $vacated-cell-marker)
          (%bucket state) := b
          (%index state)  := i
          return(state)
        end unless
      end for
    finally
      return(#f)
    end for
  end block
end method table-next-state

(dm table-finished-state? ((table <simple-table>) state limit)
  ~state
end method table-finished-state?

(dm table-current-key
    ((table <simple-table>) (state <simple-table-state>))
  let vector = (%vector state)
  elt(vector (%index state) + (%bucket state) * (%bucket-depth vector) * 2)
end method table-current-key

(dm table-current-element
    ((table <simple-table>) (state <simple-table-state>))
  let vector = (%vector state)
  let bucket-depth = (%bucket-depth vector)
  elt(vector (%index state) + (%bucket state) * bucket-depth * 2 + bucket-depth)
end method table-current-element

(dm table-current-element-setter 
    (value (table <simple-table>) (state <simple-table-state>))
  let vector = (%vector state)
  let bucket-depth = (%bucket-depth vector)
  let offset = (%index state) + (%bucket state) * bucket-depth * 2 + bucket-depth
  elt(vector offset) := value
end method table-current-element-setter

(dm table-copy-state
    ((table <simple-table>) (state <simple-table-state>))
  make(<simple-table-state>
       vector: (%vector state)
       bucket: (%bucket state) index: (%index state))
end method copy-table-state

(dm forward-iteration-protocol((table <simple-table>))
  values(table-initial-state(table)
         #f
         table-next-state
         table-finished-state?
         table-current-key
         table-current-element
         table-current-element-setter
         table-copy-state)
end method forward-iteration-protocol


/// CONCRETE TABLES

define open generic table-protocol 
    ((table <simple-table>))
 => ((test-function <function>) (hash-function <function>))

(dm key-test ((table <simple-table>)) => ((test <function>))
  let (test-function hash-function) = table-protocol(table)
  test-function
end method key-test

(dm make (class == <simple-table> #rest all-keys)
  apply(make <simple-object-table> all-keys)
end method make

define class <simple-object-table> (<simple-table>)
end class <simple-object-table>

(dm table-protocol ((table <simple-object-table>))
  values(\== object-hash)
end method table-protocol

define class <simple-equal-table> (<simple-table>)
end class <simple-equal-table>

(dm table-protocol ((table <simple-equal-table>))
  values(\= equal-hash)
end method table-protocol


/// Test code

(dm test-simple-table-1 (#key count = 1000)
  let tab = make(<simple-table>)
  for (i from 0 below count)
    puthash(tab i i + 5000)
    format-out("PUTHASH %d/%d -> %=\n" i i + 5000 (%data (%vector tab)))
  end for
  let x = make(<stretchy-vector>)
  maphash (method (k v) add!(x list(k v)) end tab)
  for (i from 0 below count)
    let elt = find-value(x method (_x) first(_x) = i end)
    unless (elt)
      error("%d missing" i)
    end unless
    unless (second(elt) = first(elt) + 5000)
      error("bogosity: key %d value %d" first(elt) second(elt))
    end unless
    x := remove!(x elt)
  end for
  unless (empty?(x))
    error("Leftover cruft %=" x)
  end unless
end method test-simple-table-1

(dm test-simple-table-2 (#key count = 1000)
  let tab = make(<simple-table>)
  for (i from 0 below count)
    puthash(tab format-to-string("%d" i) format-to-string("%d" i + 5000))
  end for
  let x = make(<stretchy-vector>)
  maphash (method (k v) add!(x list(k v)) end tab)
  for (i from 0 below count)
    let elt
      = find-value(x method (_x) first(_x) = format-to-string("%d" i) end)
    unless (elt)
      error("%= missing" format-to-string("%d" i))
    end unless
    unless (second(elt) = format-to-string("%d" i + 5000))
      error("bogosity: key %= value %=" first(elt) second(elt))
    end unless
    x := remove!(x elt)
  end for
  unless (empty?(x))
    error("Leftover cruft %=" x)
  end unless
end method test-simple-table-2

(dm test-simple-table-3 (#key count = 1000)
  let tab = make(<simple-table>)
  for (i from 0 below count)
    puthash(tab i i + 5000)
  end for
  let x = make(<stretchy-vector>)
  maphash (method (k v) add!(x list(k v)) end tab)
  for (i from 0 below count)
    let elt = find-value(x method (_x) first(_x) = i end)
    unless (elt)
      error("%d missing" i)
    end unless
    unless (second(elt) = first(elt) + 5000)
      error("bogosity: key %d value %d" first(elt) second(elt))
    end unless
    x := remove!(x elt)
  end for
  unless (empty?(x))
    error("Leftover cruft %=" x)
  end unless
end method test-simple-table-3

// eof
