;;; object

(def <parents> <lst>)
(def <props>   <lst>)

;; (def <traits> (isa <any>))
;;   (dp proto-direct-parents (<traits> => <parents>) (empty <parents>))
;;   (dp proto-direct-props (<traits> => <props>)     (empty <props>))
;;   (dp proto-parents (<traits> => <parents>)        (empty <parents>))
;;   (dp proto-props (<traits> => <props>)            (empty <props>))
;;   (dp proto-owner (<traits> => <any>))

(df traits-ordered-parents (o|<traits> => <parents>)
  (puts "in pop") (newline)
  (loc ((merge-lists ((partial-cpl <lst>) (remaining-lists <lst>))
          ;; the partial-cpl is in reverse order at this point.
         (if (all? empty? remaining-lists)
             (rev! partial-cpl)
             (loc ((unconstrained-proto (p)
                    (loc ((p-in-and-unconstrained-in? (l lst)
                           (== (head l) p))
                          (p-unconstrained-in? (l lst)
                           (or (== (head l) p) (not (mem? p (tail l))))))
                      (and (any? p-in-and-unconstrained-in? remaining-lists)
                           (all? p-unconstrained-in? remaining-lists)
                           p)))
                   (unconstrained-proto-in-parents (o <any>)
                     (any? unconstrained-proto (proto-parents o))))
               (let ((next (any? unconstrained-proto-in-parents partial-cpl)))
                 (if next
                      (loc ((remove-next (l lst)
                              (if (== (head l) next) (tail l) l)))
                        (merge-lists 
                         (pair next partial-cpl)
                         (into remaining-lists 
                            (map remaining-lists remove-next remaining-lists))))
                      (error "inconsistent precedence graph")))))))
     (def parents (traits-direct-parents o))
     (if (or (empty? parents)
             (and (= (len parents) 1)
                  (== (elt parents 0) (traits-owner o))))
         parents
         (merge-lists (lst (traits-owner o))
                      (add (map proto-parents parents) parents)))))

(df traits-ordered-props (x|<traits> => <props>)
  (del-dups (reduce cat '() (map proto-direct-props (traits-parents x)))))

(df make-traits (parents|<parents> props|<props> owner => <traits>)
  (puts "0") (newline)
  (def x (isa <traits>
           (set traits-direct-parents parents)
           (set traits-direct-props   props)
           (set traits-owner          owner)))
  (set (%proto-traits owner) x)
  (if (empty? (traits-parents x))
      (set (traits-direct-parents x) (lst (proto-owner x))))
  (set (traits-parents x) (traits-ordered-parents x))
  (set (traits-props x)   (traits-ordered-props x))
  x)

;; trampoline meta methods

(df proto-direct-props (x => <props>)
  (traits-direct-props (%proto-traits x)))

(df proto-direct-parents (x => <parents>)
  (traits-direct-parents (%proto-traits x)))

(df proto-props (x => <props>)
  (traits-props (%proto-traits x)))

(df proto-parents (x => <parents>)
  (traits-parents (%proto-traits x)))

;;; props

;; (def <prop> (isa <any>))
;;   (dp prop-name (<prop> => <sym>))
;;   (dp prop-owner (<prop> => <any>))
;;   (dp prop-init (<prop> => <fun>) (fun (x) nul))
;;   (dp prop-type (<prop> => <any>))

(df prop-offset (object name|<sym> => <int>)
  (def props (proto-props object))
  (find props (fun (prop) (== (prop-name prop) name))))

(df &prop-value (object name|<sym> => <any>)
  (def offset (prop-offset object name))
  (if offset
      (let ((val (%proto-values-element object (%iu offset))))
        (if (== val nul)
            (let ((props (proto-props object)))
              (set (%proto-values-element object (%iu offset))
                   ((prop-init (elt props offset)) object)))
            val))
      (error "prop %s not found in %=" name object)))

(df &prop-value-setter (z object name|<sym>)
  (def offset (prop-offset object name))
  (if offset
      (set (%proto-values-element object (%iu offset)) z)
      (error "prop %s not found in %=" name object)))

(df ensure-traits (x => <any>)
  (unless (== (traits-owner (%proto-traits x)) x)
    (set (%proto-traits x)
         (make-traits (lst (proto-owner (%proto-traits x)))
                      (traits-direct-props (%proto-traits x))
                      x)))
  x)

(df %isa (parents|<lst> names|<lst> vals|<lst> => <any>)
  (def object (%make-proto))
  (def traits (if (= (len parents) 1)
                  (%proto-traits (ensure-traits (elt parents 0)))
                  (make-traits
                   (map ensure-traits parents) '() object)))
  (set (%proto-traits object) traits)
  (%install-proto-values object (len (proto-props object)))
  (itr loop ((props (proto-props object)))
    (unless (== props '())
      (let ((prop (head props)))
        (set (&prop-value object (prop-name prop))
             (&prop-value (prop-owner prop) (prop-name prop)))
        (loop (tail props)))))
  (itr loop ((names names) (vals vals))
    (unless (or (== names '()) (== vals '()))
      (seq (set (&prop-value object (head names)) (head vals))
           (loop (tail names) (tail vals)))))
  object)

(df %prop (owner name|<sym> type init|<fun>)
  (ensure-traits owner)
  (def traits (%proto-traits owner))
  (def prop (isa <prop>
              (set prop-name name) (set prop-owner owner)
              (set prop-type type) (set prop-init  init)))
  (set (traits-direct-props traits)
       (cat (traits-direct-props traits) (lst prop)))
  (set (traits-props traits)
       (traits-ordered-props traits))
  (%adjust-proto-values-size owner (len (proto-props owner)) owner)
  (set (&prop-value owner name) (init owner))
  prop)

