(def <env>   <any>)
(def <specs> <lst>)
(def <body>  <any>)

;; (def <fun> (isa <any>))
;;   (slot <fun> (fun-body  <body>))
;;   (slot <fun> (fun-specs <specs>))
;;   (slot <fun> (fun-opts? <log>) #f)

;; (def <met> (isa <fun>))
;;   (slot <met> (fun-env   <env>))

(df fun-nreq ((x <fun>) => <int>)
  (len (fun-specs x)))

(df fun-spec ((x <met>) (i <int>) => <any>)
  (elt (fun-specs x) i))

(def <mets> <lst>)

;; (def <gen> (isa <fun>))
;;   (slot <gen> (fun-mets <mets>) '())

(df fab-gen ((n <int>) (mets <mets>) => <gen>)
  (let ((specs (fill (fab <specs> n) <any>)))
    (isa <gen> (set fun-specs specs) (set fun-mets mets))))

(df fun-same-met? ((x <met>) (y <met>) => <log>)
  (all? == (fun-specs x) (fun-specs y)))

(df gen-add-met ((g <gen>) (m <met>) => <gen>)
  (itr col ((mets '()) (same? #f) ((gms <mets>) (fun-mets g)))
    (if (empty? gms)
	(set (fun-mets g) (rev! (if same? mets (add mets m))))
	(let ((gm    (head gms))
	      (same? (fun-same-met? gm m)))
	  (col (add (if same? m gm) mets) same? (tail gms)))))
  g)

(def <args> <lst>)

(df isa? (o1 o2 => <log>)
  (or (== o1 o2)
      (itr find ((ps (proto-ordered-parents o1)))
	(if (empty? ps)
	    #f
	    (let ((o (head ps)))
	      (if (== o o2)
		  #t
		  (find (tail ps))))))))

(df proto< (o1 o2 wrt => <log>)
  (if (== wrt o1)
      #t
      (if (== wrt o2)
	  #f
	  (itr find ((ps (proto-ordered-parents wrt)))
	    (if (empty? ps)
		(error "can't order specializers - arg/reference object %= is "
		       "neither %= nor %=" wrt o1 o2) 
		(let ((o (head ps)))
		  (if (== o o1)
		      #t
		      (if (== o o2)
			  #f
			  (find (tail ps))))))))))

(def <tup> <lst>)
(def tup  lst)

(df order-specs (t1 t2 arg => (order <sym>) canonical-type)
  (if (== t1 t2) 
      (tup '= t1)
      (if (proto< t1 t2 arg)
	  (tup '< t1)
	  (tup '> t2))))

(df order-mets ((m1 <met>) (m2 <met>) (args <args>) => (order <sym>))
  (let ((nreq <int>) (fun-nreq m1))
    (itr loop (((state <sym>) '=) ((idx <int>) 0))
      (if (== idx nreq)
	  state
	  (let ((m1spec (fun-spec m1 idx))
		(m2spec (fun-spec m2 idx))
		((cmp <sym>) (order-specs m1spec m2spec (elt args idx)))
		((idx <int>) (+ idx 1)))
	    (if (== cmp '=)
		(loop state idx)
		(if (and (~== cmp '<>) (or (== state '=) (== cmp state)))
		    (loop cmp idx)
		    '<>)))))))


(df sorted-app-mets-1
      ((mets <lst>) (args <args>) (order-mets <fun>)
       => (ordered <lst>) (ambig <lst>))
  (let (((ohead <lst>) (pair #f '()))
	((ahead <lst>) (pair #f '())))
    (itr loop (((mets <lst>) mets))
      (or (== mets '())
	  (let (((met <met>) (head mets)))
	    (loc ((make-ambiguous (headed-list lst)
		    (itr loop (((l <lst>) (tail headed-list)))
		      (or (== l '())
			  (let ((t1 (tail l)))
			    (set (tail l) (tail ahead))
			    (set (tail ahead) l)
			    (loop t1))))
		    (set (tail headed-list) '())
		    (set (tail ahead) (pair met (tail ahead))))
		  (precedes-all? ((l <lst>))
                    (itr loop (((l <lst>) l))
		      (if (== l '())
			  #t
			  (if (~== (order-mets met (head l) args) '<)
			      #f
			      (loop (tail l))))))
		  (check-subsequent-ambiguities ((oprev <lst>))
		     (if (or (not (precedes-all? (tail oprev)))
			     (not (precedes-all? (tail ahead))))
			 (make-ambiguous oprev)
			 (set (tail oprev) (pair met (tail oprev)))))
		  (insert ((oprev <lst>) (osub <lst>)))
		     (if (empty? osub)
			 (check-subsequent-ambiguities oprev)
			 (let ((indic (order-mets met (head osub) args)))
			   (if (== indic '<)     ;; comes before current one.
			       (check-subsequent-ambiguities oprev)
			       (if (== indic '>) ;; comes after, check further.
				   (insert osub (tail osub))
				   (make-ambiguous oprev))))))
	      (insert ohead (tail ohead))))))
    (tup (tail ohead) (tail ahead))))

(df met-app? ((met <met>) (args <args>) => <log>)
  (let (((n <int>) (len args)))
    (itr loop (((i <int>) 0))
      (if (== i n)
	  #t
	  (if (isa? (elt args i) (fun-spec met i))
	      (loop (+ i 1))
	      #f)))))

(df sorted-app-mets
      ((gf <gen>) (args <args>) => (ordered <lst>) (ambig <lst>))
  (let (((headed-mets <lst>) = (lst #f))
	(considered-mets
	 (itr col ((ans '()) (ms (fun-mets gf)))
	   (if (empty? ms)
	       ans
	       (let ((m (head ms))
		     (ans (if (met-app? m args) (pair m ans) ans)))
		 (col ans (tail ms)))))))
    (sorted-app-mets-1 considered-mets args order-mets)))

(df opt-args ((n <int>) (args <args>) => <args>)
  (itr col (((i <int>) 0) ((l <args>) '()) ((p <args>) args))
    (if (= i n)
	(if (empty? l)
	    (lst p)
	    (seq (set (tail l) (lst p)) args))
	(col (+ i 1) p (tail p)))))

;; (dm apply ((proc <met>) (args <opts>))
;;   (let ((reg-args (if (fun-opts? proc) (opt-args args) args)))
;;     (%met-call proc reg-args)))
;; 
;; (dm apply ((proc <gen>) (args <opts>))
;;   (let ((ord-amb-mets   (sorted-app-mets proc args))
;; 	(sorted-mets    (elt ord-amb-mets 0))
;; 	(ambiguous-mets (elt ord-amb-mets 1)))
;;     (if (> (len ambiguous-mets) 0)
;; 	(error "Ambiguous Method Error when calling %= on %=" proc args)
;; 	(if (empty? sorted-mets)
;; 	    (error "No Applicable Methods Error when calling %= on %="
;; 		   proc args)
;; 	    (apply (elt sorted-mets 0) args)))))

;; (dm fun-add-met ((o <met>) (n <met>) => <gen>)
;;   (let ((g (fab-gen (fun-nreq n) (lst n))))
;;     (gen-add-met g n)))
;; 
;; (dm fun-add-met ((o <gen>) (n <met>) => <gen>)
;;   (gen-add-met o n))
;; 
;; (dm fun-add-met (o (n <met>) => <gen>)
;;   (fab-gen (fun-nreq n) (lst n)))
