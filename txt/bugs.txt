=== 0.143 BUGS ===

*-setter too long

default values should be (x 0)

trunc/ should return one value

change do-keyed to do-items (or do-map?) and doc

rotf instead of swapf?

---

collection writing 101 doc

need stack overflow check

condition hierarchy, 
  range error, unbound binding
*, **, ... for previous values

goo/user 0<= (dc <a> (<any>))
goo/user 0=> #f
goo/user 0<= (dp aa (<a> => <int>) 5)
goo/user 0=> #{Prop #{Gen aa (<any>)}}
goo/user 0<= (dc <b> (<a>))
goo/user 0=> #f
goo/user 0<= (dp aa (<b> => <int>) 6)
goo/user 0=> #{Prop #{Gen aa (<any>)}}
goo/user 0<= (dv x (new <b>))
goo/user 0=> #f
goo/user 0<= x
goo/user 0=> #{<a> aa: 5 aa: 5}

tie to-str and write together

ds like df 

document object-class

add GOOPATH

1) When I unsuccessfully try to load a module (it has a syntax or
runtime error), I cannot attempt loading it again:

goo/user 1<= test:foo
ERROR: test: error: Circular use of test not allowed

2) There's no `reload' functionality (that I've found) that will let me
reload a module that's changed on disk, even if the initial load _was_
successful.

3) REPL. I'm writing a tutorial for goo based on the Python tutorial,
and since I'm including snippets of REPL usage, it's become painfully
obvious how annoying the REPL prompts are. (a) Output and Input prefixes
should not be so similar. How about leaving out the current-module name,
and just have "=>" or somesuch?  (b) there should be continuation
prompts. 

4) Can I have an option to turn off the annoying ("1. Return to
interpreter level N."*stacklevel) messages?

goo/user 0<= 48637761
goo/user 0=> 48637760

(new <map>) ;; causes recursive printing error

fix recursive printing errors

=== 0.133 BUGS ===

=== 0.131 BUGS ===

o ,top doesn't work
o missing object-class
o document that macros are unhygienic at present
o no as str method for true
x add missing reader macro support
x vec should print with #[] syntax
o backslashes in gnumakefile
o split out vec from flat-sequences in manual
x special forms produce a rather odd error when evaluated:
  goo/user 0<= dc
  ERROR: No applicable methods error when calling #{Gen ast-evaluate
  (<any>)} on (#{<module-binding> ....
  [several more lines here]
x goo segfaults when attempting to instantiate a class with no superclasses.
  goo/user 0<= (dc foo ())
  goo/user 0=> #f
  goo/user 0<= (new foo)
  zsh: segmentation fault  bin/goo
x pop! range-error for vec
x len-setter range-error
x pow should use contagious-call
x flo pow returns 1.0
x use c3 algorithm
x descendents works like children
x adding a property after the fact crashes goo

=== 0.116 BUGS ===

o rep should take return type decls
o run ast-linearize on type-expressions

=== 0.111 BUGS ===

x too few args blows up in dispatcher
x don't type check prop inits
x macro-expand doesn't work
o ,', broken e.g., `(mif (,',pattern)) says unable to evaluate pattern
o generic on stack instead of method
o app is a macro
o (apply | args) ;; translates to ((apply args))
o (df x ((x|<int>) => <int>) ...) ;; blows up in mangler -- should be detected

=== 0.110 BUGS ===

* colon not allowed in compiled code
* mangler doesn't handle weird chars or capitals
* breaking out of compiler broken

=== 0.97 BUGS ===

* EARLY ERRORS

The files prt.c, boot.proto and runtime.proto makes calls to (error ...)
and various (*-error ...) functions before they have been set up.  Similarly,
keyboard-interrupt may be invoked *long* before it is ready.

Proposed fix:
  Create %early-error and similar functions to handle errors in a safe
  fashion until the regular error functions are ready.  And fix
  the code in prt.c which calls keyboard-interrupt so that it copes
  gracefully with an unbound variable.

* 'IF' SYNTAX CHECKING

0<= (if #f 1 2 3)
0=> 2

Actually, most of syntax.proto should be rewritten to use
(mif ,pattern-bind ,code (error ...)).

* HOSED GF DISPATCH

Talk to James about how the singleton cache is getting flushed.  He
understands this; I have no idea what's going on.

=== 0.95 BUGS ===

next-method doesn't work in interpreted code

=== 0.92 BUGS ===

0<= (ds (bar x) (list + 2 2))      
0=> #f
0<= (bar 2)
0=> #f
0<= (bar x)
0=> 4
Expected behavior: An error message or something like that.

=== 0.90cvs BUGS ===

0<= (map (fun (c) "-") "abc")
ERROR: No Applicable Methods Error when calling #{Gen low-elt-setter (<any> <any> <any>)} on ("-" "   " 0)

=== 0.89 BUGS ===

2<= (quit)
6=> #f
6<= (quit)

---

(dv test (isa <any>))
(slot test param-slots '())
(len (set (param-slots test) (add (param-slots test) (slot test heh))))
=> 1
(len (param-slots test))
=> 0

---

(fabs <tab> 1 2 3 4)
(dm f (x) )
(dm f (x) ) ;; TYPE ERROR #{Met ()} SHOULD BE A <gen>

---

isa inheriting slot values

=== 0.82 BUGS ===

0<= (dv <ptr> (isa <any>))
0=> #f
0<= (str-eval "<ptr>")
0=> "#{<any>}"
0<= (slot <ptr> ptr-value)
0=> #{<slot> slot-owner: #{#f #f: nul} slot-getter: #{Gen (<any>)} slot-setter: #{Gen (<any> <any>)} slot-type: <any> slot-init: #{Met (<any>)}}
0<= (str-eval "<ptr>")
ERROR: No Applicable Methods Error when calling #{Gen add (<seq> <any>)} on ("#{" #\#)

running the following

        (seq (dv <a> (isa <any>))
             (dv a (isa <a>))
             (slot <a> ax)
             a)

gives a seg fault on the last command.  I don't know why.

0<= 0=> #f
0<= 0=> #f
0<= 0=> #{<slot> slot-owner: #{#f #f: nul} slot-getter: #{Gen (<any>)} slot-setter: #{Gen (<any> <any>)} slot-type: <any> slot-init: #{Met (<any>)}}
0<= 0=> #{<slot> slot-owner: #{#f #f: nul #f: nul} slot-getter: #{Gen (<any>)} slot-setter: #{Gen (<any> <any>)} slot-type: <any> slot-init: #{Met (<any>)}}
0<= 
Process proto segmentation fault

=== 0.70 FIXES ===

In trying to tune my test script to handle errors that might be
generated, I tried playing with the TRY command:

  0<= (try ((x r) 1000) 3)
  ERROR: Unbound binding: %with-monitor

Is this a bug with the runtime, or am I wrong about how TRY is
supposed to work?

In Proto, <flo>'s don't print out with their decimal points, unless the either
the part before or after the decimal point is 0.  E.g., 3.0 and 0.3
get printed out correctly, but 4.3 gets printed out as 43.

"(nxt-state c)" in reduce+ should "(nxt-state c state)"

If an error occurs during the ,then clause of a 'MIF special form, the
error never gets reported and the ,else clause gets executed.  For
instance,

   (mif ((,a ,b ,c) '(1 2 3))
        (seq (display out "YES\n")
             (no-such-method a b c))
        (display out "NO\n"))

outputs

   YES
   NO

(apply + 2)
Immediate death. (+ can be anything, having the second arg not be a 
list is what kills it)

Calling functions apparently doesn't do parameter type checking, 
which is somewhat surprising, since you can declare functions to take 
certain parameter types.
e.g.
0<= (dv test (fun ((a <num>) (b <num>)) (= a b)))
0<= (test 1 1)
0=> #t
0<= (test #t #t)
0=> #t
IMO the second one should have returned an error, although I suppose 
that may be a deliberate language design choice?

I think its probably bad that:
0<= (fun-mets +)
0=> (#{Met (ERROR: No Applicable Methods Error when calling #{Gen 
contagious-type (No Applicable Methods Error when calling #{Gen 
contagious-type (No Applicable Methods Error when calling #{Gen 
contagious-type (No Applicable Methods Error when calling #{Gen 
contagious-type (No Applicable Methods Error when calling #{Gen 
contagious-type (No Applicable Methods Error when calling #{Gen 
contagious-type (No Applicable Methods Error when calling #{Gen 
contagious-type (No Applicable Methods Error when calling #{Gen 
contagious-type (No Applicable Methods Error when calling #{Gen 
contagious-type (No Applicable Methods Error when calling #{Gen 
contagious-type (No Applicable Methods Error when calling #{Gen 
contagious-type (No Applicable Methods ............ segfault


Also, running proto without the proper PROTO_ROOT set segfaults if 
you aren't in the right dir. IMO it should attempt to figure out 
where to look based on the location of the exe, not based on the 
working dir.

^C in Linux Proto only works the first time you type it.  The first
time it works great, but if you try to use it again, it doesn't do
anything.

0<= (macro-expand (when 1 2))
ERROR: TYPE ERROR (when 1 2) SHOULD BE A <fun>

=== > 0.70 BUGS ===

Hi.  What's the correct behavior if an attempt is made to use 'DV to
change the value of a local variable?  I take it from the the
following that it is to be considered an error?  (It's hard for me to
tell from the error message if this is supposed to be an error, or if
this is a bug.)

   (let ((z 10)) (dv z 5) z)

   ERROR: No Applicable Methods Error when calling #{Gen binding-free? ($<any>)} on
(#{<local-binding> binding-dotted?: #f binding-mutable?: #f binding-type:
#{<global-reference> reference-binding: #{<global-binding> binding-index: 0
binding-free?: #t binding-type: $nul binding-name: <any>}} binding-name: z})

   0<= (df bar (x) (+ x 1))
   0=> #f
   0<= (dm bar (x) (+ x 1))

   Process proto segmentation fault

and this should probably be an error:

   0<= (df foo (x) x)
   0=> #f
   0<= (foo 1 2)
   0=> 1

DA> Hi.  Is there a way in Proto to make at runtime a method with a given
DA> specs and body, so that I can implement abstraction interoperation
DA> for methods?

DA> I tried doing "(fun ((args ...)) ,@body)", and then setting the
DA> fun-specs, fun-arity, and fun-nary slots on the resulting method to
DA> represent a specific list of argument types.  But this caused 'args to
DA> be bound to the wrong data.  So then I tried making a new type by
DA> cloning <fun> and overriding ,apply on the new type.  But this causes
DA> Proto to go into an infinite loop.  In fact, examining or touching
DA> ,apply in any way seems to put Proto into a loop.

I know this is supposed to be an error, but it probably shouldn't dump core:

0<= (dv foo (lab bar bar))
0=> #f
0<= (foo) 
Segmentation fault

Very bad things happen if you use the name "seq" as a function
parameter.  Not that someone should be doing this, but in the unlikely
circumstance that someone does this by accident, it turns out to be
very hard to track down the source of the problem.

0<= (dv <foo> (isa <any>))
0=> #f
0<= (slot <foo> (x <int> 3))  
Segmentation fault

"env-extend!" doesn't really modify 'env', does it, despite the "!" in
its name?  Also, it returns an <env>, not a <frame>.

(dv heh (isa 5)) segfaults

(dv heh (isa 'test)) doesn't work

Is it illegal to add a slot to a generic in Proto?

