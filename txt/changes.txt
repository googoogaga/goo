=== 0.40 Keith RELEASE 1 ===

=== 0.50 Keith RELEASE 2 ===

=== 0.60 6.894 RELEASE 1 ===

=== 0.61 6.894 RELEASE 2 ===

fixed gen-add-met problem whereby methods might not be properly
replaced

added initialization string
added file-opening-error

=== 0.62 6.894 RELEASE 3 ===

added 

  os-name
  os-binding-value os-binding-value-setter
  *proto-root*
  src-filename
  *path-separator*
  *proto-version*
  *proto-date*

fixed file-opening-error

require that users now setenv PROTO_ROOT which in my case would be:

  \jrb\ai\proto\

must be slash terminated.

=== 0.63 6.894 RELEASE 4 ===

fixed AND and OR macros and native pattern matching mechanism.

=== 0.64 6.894 RELEASE 5 ===

fixes

  1.  nul/nul-slot  confusion  which  would  manifest  itself  in very
  strange ways such as ((fun (x) x) nul) returning the empty list.

  2. () typed into proto's toplevel crashes proto

  3.   printing   prototypes   can   crash   proto,   in   particular,
  (object-parents <lst>) at toplevel


=== 0.65 6.894 RELEASE 6 ===

fixes:

  singleton specializer problem: whereby methods dispatching on
  singletons would infinitely loop if they returned false

  incomplete printing of errors in top-level: where
  <simple-condition>'s weren't being formatted

adds:

  keyboard interrupt handling: which means that C-C will stop your
  program and put you in a next level of the listener

=== 0.66 6.894 RELEASE 7 ===

fixes:

  fixed singleton dispatch cache problem

  fixed DG to create working generics

adds:

  fab-gen (used in assignment 3)

=== 0.70 6.894 RELEASE 8 ===

fixes: 

  try broken 

    0<= (try ((x r) 1000) 3)
    ERROR: Unbound binding: %with-monitor

  <flo>'s don't print out with their decimal points.

  reduce+ calls nxt-state with wrong arguments.

  If an error occurs during the ,then clause of a 'MIF special form,
  the error never gets reported and the ,else clause gets executed.

  Calling functions doesn't do parameter type checking ... and 
  (apply + 2) causes segfault.

  printing <num> causes segfault.

  running proto without the proper PROTO_ROOT set segfaults if you
  aren't in the right dir. it now figures out where to look based on
  the location of the exe (see app-filename), not based on the working
  dir.

  ^C in Linux Proto only works the first time you type it.  The first
  time it works great, but if you try to use it again, it doesn't do
  anything.  

  0<= (macro-expand (when 1 2))
  ERROR: TYPE ERROR (when 1 2) SHOULD BE A <fun>

  changed named objects to print without "$" prefix

adds:

  Generic  all2? ((test <fun>) (x <col>) (y <col>) => <log>)

    two collection version of all?

  Generic  any2? ((test <fun>) (x <col>) (y <col>) => <log>)

    two collection version of any?

  Method   add-slot (owner (getter <gen>) (setter <gen>) type (init <fun>))

    where init is a one parameter function that returns the initial
    value for the slot and gets called lazily with the new instance as
    the argument.

  Method   app-filename (=> <str>)

    returns filename of proto exe.

  Method   app-args (=> <lst>)

    returns list of argument strings passed to proto.

changes:

  faster interpreter environments with integer offsets.

  tagged <int>'s <chr>'s and <loc>'s

=== 0.71 6.894 RELEASE 9 ===

fixes: 

  redefining a runtime binding

=== 0.72 6.894 RELEASE 10 ===

fixes: 

  (re)defining method on a runtime defined generic

adds:

  Method object-traits (x => <traits>)

    returns the traits object of a given argument

=== 0.80 6.894 RELEASE 12 ===

summary:

exposes all bindings and takes longer to startup.  
ast-linearize and p2c mostly working although p2c not quite bootstrapped.

fixes:

  do(<fun>, <tab>) now calls function with only table values
  iteration protocol on <tab>

adds:

ast enhancements for code generation and typing

  (slot <program> (program-register <int>))
  (slot <program> program-type)

stretchy-vectors (although i'll probably change their names to <buf>)

  <svec> 

  do-keyed(<fun>, <tab>) 

for loops

  (for ((,name ,value) ...) ,@body)

ranges -- like dylan's range's and from for clause

  <range> from from-to from-below from-above and "-by" versions

  (for ((i (from 0))) ...) 
  (for ((i (from-below 0 10))) ...) 

steps -- like dylan's first/then for clause

  <step> first-then

  (for ((first? (first-then #t #f))) ...) 

=== 0.81 6.894 RELEASE 13 ===

summary:

closer to bootstrapping.  adds ffi support.

fixes:

  various piddly ast-linearize bugs.

adds:

ffi support

  %fapply primitive to proto.h
  fapply (fproc (args <opts>)) function to boot.proto


=== 0.82 6.894 RELEASE 14 ===

summary:

  p2c bootstrapped.  p2c can now compile itself and produce a compilable
  C file.  i have not thoroughly tested this, but i've fixed a bunch
  of bugs and the code in ast-linearize and p2c is now working well.  

fixes:

  clr! ((x <tab>) fill)
 
  eof-object? to be restricted to <chr>'s and otherwise return false.

adds:

  multiple values binding tup to let

  loads "../SRC/patches.proto" now which you can hack

=== 0.83 6.894 RELEASE 15 ===

summary:

fixes:

  svec -> buf

  #() now reads

  redefinition of macros works

  inverse symbol looking now works for interpreter defined bindings

adds:

  tail call analysis in ast

=== 0.84 ===

summary:

fixes:

  minimizes number of files

  ENVNUL

  make simple-table-vector use faster vector ops

  inlines @empty?

  slot ordering

  duplicated <any> in object-parents

  del-dups reversed answer

  table growth

  nary fixed-let

adds:

  split proto.c into prt.c and prt.h

  stack allocation
  
  data stack

  backtrace

  return type checking

  range checking on sequences

=== 0.85 ===

summary:

fixes:

adds:

  sub-setter

  <list> and list
 
  rewrote list to be subclassable

  rewrote all list-like ast classes as list subclasses

=== 0.86 ===

summary:

fixes:

  objectify <lst> passes through <programs> explicitly

adds:

  removes return type checks for any

  type checks fix-lets

  depth and length to C-based printer

  skip unspecialized steps in cache

  start of support for separate compilation

  collecting macro

  split top level initialization in closurize-main!

  int's and chr's as inline constants

=== 0.87 ===

summary:

  adds next-method support

fixes:

adds:

  next-method support through next-method and apply-next-method macros.

=== 0.88 ===

summary:

  adds compileable macros and mif.  gets rid of need for loading
  macros file, reducing startup time and forgotten macros.  gets
  backtrace working.

fixes:

  makes mif a macro and not a special form

  makes macros compileable

  boot-symbol to recycle booted symbols

  backtrace substrate

adds:

  backtrace function

=== 0.89 ===

summary:

  compiler bootstrapped.

fixes:

  got table iteration protocol working for larger tables.

adds:

  for loop support for collection keys:  (for (((tup key val) tab)) ...)

=== 0.90 ===

summary:

  more debuggability.  splits out function signature slots into
  signature object.

fixes:

  flush getter caches when slot added.

adds:

  signature object <sig>.
  fun-name and sig-names for debuggability.
  improved fun writing
    to use fun-name instead of object-name.
    optionally print return type
    print fun-names when available
  remove mark from closures to decrease size
  <module-binding> with binding-home slot
     superclass of global, runtime and predefined bindings
  potential to shadow bindings in ast-define-binding

=== 0.91 ===

summary:

  bug fixed 0.90 and added return type checking on interpreted functions.

fixes:

  slot creation and p2c problems from 0.90.

adds:

  return type checking on interpreted functions.
  symbolic information for both arg and fun names

=== 0.92 ===

summary

  more commented boot, redefinition support, proper cloning, and
  more manageable printing

fixes

  clone inherited values in objects created with isa
  removed lots of cruft from bootstrap unneeded
  removed emulator remnants
  increased size of initial symbol table
  undef'd p in boot and x z in runtime and name in ast
  don't dump bindings as debug-name for functions
  CHECK_ARITY is now an inlined function

additions

  lots more boot comments 
  *max-print-depth* and *max-print-length*
  %clone primitive
  redefinition support for changed prototypes

=== 0.93 ===

summary

  ???

=== 0.94 ===

summary

  compile-time modules implementing use and export

=== 0.95 ===

summary

  statement oriented c backend staged for native code emission plus
  fixes to get test-suite to pass most tests

fixes

  fixed write-character to behave correctly when character-name didn't exist
  added %call-next-method to boot's exports
  fixed zero to use contagious call
  fixed a bunch of collection methods shown up by test-suite including 
    alter fab and fabs

adds

  introduced notion of computed and passive programs
  reflected runtime signatures in ast so that signature creation would
    be modeled correctly 
  added registers to functions and registers to programs
    and added simple-minded register allocation pass to analysis
  overhauled p2c to output in statement oriented fashion
    now perhaps a few dead-code eliminations during output

=== 0.96 ===

summary

  new compiler driver with dependency tracking and separate files.

=== 0.97 ===

summary
 
  one class of binding.  use binding-kind to distinguish different types.

changes

  changed ast-define-binding to take a kind argument used for fabbing
  binding obviating need for fab thunk

adds

  defaults to <simple-condition>'s condition-string and condition-arguments
  curses primitives

fixes
 
  next-method to work in interpreter
  got rid of description's from ast
  bug in process-nary-closed-application to correctly fab a fix-let

=== 0.98 ===

summary

  restarts.

=== 0.99 ===

summary
 
  p2m

fixes

  fab-map to use fab
  empty to use fab
  quotation extractor now scans debug-names and signatures
  
adds

  keys
  refs to symbols in functions and their signatures
=======

=== 0.101 ===

summary

first step towards type-based proto.  put in place holders for define
class, named dc, and type creation functions, named t=, t+, t<.

changes

adds

fixes

=== 0.102 ===

summary

  big change that establishes a real type-based proto.  many types and a
  type algebra is in place including dispatch to support them.

changes

  type-based proto
  removed regsym
  flattened object representation of regular and repeated instances 

adds

  <class> etc
  class-name

fixes

  methods have names again in c output

=== 0.103 ===

summary

  james' faster calling convention

=== 0.104 ===

summary

  lazy module loading

changes

  runtime modules are now lazily loaded
  loc now tags and untags correctly
  split out library specific primitives into their respective source files
  increased symbol table initial size to 10000

adds

  opf 
  $max-int $min-int
  elt-or for specifying defaults to elt access
  more support for win32 esp stdout flushing and gc-init

fixes

  corrected return values of do-key-vals, reduce, reduce+
  made class printing terse during signatures and nested types

=== 0.105 ===

summary

  sped up p2c by replacing calls to format by calls to write-string

=== 0.106 ===

summary

  this is a major new release moving in the direction of compilation
  to machine code, whole program optimization, and introducing a
  dynamic compilation based interpreter mode.  interpreter can be
  switched from ast interpretation to dynamic p2c evaluation by using
  (p2c-eval) and (ast-eval) top-level commands.  the default is
  (ast-eval). 

changes

  made %lb/%lu correctly tag/untag locatives without previous
  gyrations.
  merged a bunch of classes into ast from ast-linearize to reduce
  consing and generally streamline ast construction.

adds

  elt-or
  dynamic evaluation support with p2c-exp
  simple type inference module: typist.proto
  simple compile time dispatch mechanism: optimize.proto
  start of a vm: pvm.proto
  start of compilation to machine code: p2m.proto
  <immediate-constant>
  <method-application>
  ability to store source with function: ast:*record-source?*
  ability to record function references for p2m
  process-id
  swapf
  ddv

fixes

  improved ast-print to really work
  signature slots are now properly converted to programs
