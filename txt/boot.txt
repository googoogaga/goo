SO YOU WANT TO WRITE A NEW DYNAMIC LANGUAGE?

but your language P doesn't exist to write it in?

start by write an interpreter in D.
  can experiment with P very easily

great but 
  it will only run on machines that D runs on and
  it will never be faster than an interpreter

you also need to write the runtime and libraries
  you want to experiment with P so you can 
    leverage D as much as possible such as 
      debugger interactor objects ...
    meaning that you write a bunch of P's runtime in D

so you write a cross compiler P->C
  but you still don't have a full system written in P

so you rewrite your runtime in P
  but you now are in C and can't assume anything so
  you decide to build all runtime objects by hand so
  you can't depend on anything that hasn't been built yet

so now you get back to writing P->C
  still want to write P->C in D because of 
    speed, debuggability and interactivity
  you port enough of your P system to have a P implementation including
    c-runtime, object system, libraries, io, interpreter

but unfortunately you've got P->C still in D
  finally port P->C to P and 
  ensure that it can P-P->C => P-D->C => C which can in turn compile P-P->C

BOOT NOTES

FULL DYLAN SIMULATION
  READ/WRITE
  INTERPRETER

BOOTSTRAP GOALS
  PORTABILITY
  ONE IMPLEMENTATION

PARTIAL DYLAN SIMULATION

strategy
  simulate object-system in dylan
  use ffi approach to talk between worlds
  advantage:    simpler boot -- more reuse
  disadvantage: seam and putting off real boot

import/export
  importers-by-object
  importers-by-owner

environment
  binding-definer
    defines binding in environment with initial value
  function-definer
    same where value is a function

symbols
  keep track of symbols and boot later

slots and accessors

object definitions
  bunch of macros which define 

proto-apply
  distinguishes between primitives and proto objects
  uses import/export to call primitives  


HYBRID INITIAL BOOT

x %%field-value, %%field-value-setter
x %%clone(name, init, ...)
x %%isa(name, superclass)
x %%fld(owner, field-name, type, init, offset)
x %%build-booted-accessors()
x EXPORT LITERALS IN EVAL
x EXPORTING METHODS
x PRINT METHODS FOR OBJECTS
o BOOT NIL TO HAVE HEAD AND TAIL

1. WRITE BASE INTERPRETER
2. GET BASIC RUNTIME RUNNING AND TESTED
3. GET INTERPRETER RUNNING IN ITSELF
4. WRITE P->C|D COMPILER
5. COMPILE RUNTIME AND TEST
6. COMPILE INTERPRETER AND TEST
7. REWRITE AS P->C|P COMPILER 
8. COMPILER P->C|P AND TEST 

1. WRITE BASE INTERPRETER
2. WRITE TEST-SUITE IN DYLAN
3. GET BASIC RUNTIME RUNNING AND TESTED
4. GET TEST SUITE REWRITTEN IN PROTO
5. REWRITE ALL BUT PRIMITIVES IN PROTO 
   ENVIRONMENT
   SYNTAX
   ASCII
   READ
   WRITE
   TOP
   AST
   AST-EVAL
   ---
   AST-PRINT
   AST-LINEARIZE
   P2C

COMPILER PLAN

1. IDENTIFY ALL FUNCTIONS AND SPECIALIZERS 
2. STORE DEFS IN BINDINGS
3. BUILD DISPATCHERS FOR ALL GENERICS USING ISA? DEC TREE
4. DUMP ALL FUNCTIONS
5. PREBUILD 
