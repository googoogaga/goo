NEW

x make sure inlines are in place
x lightweight boxes
o boot classes don't init props correctly using nul instead
o use pub for all exporteds
o print out entire system
o doc d. and dp!
o d. as dv -- enforce d.
o tag false and true -- nah -- 00 A 01 I 11 L 10 C 
o need type checks in loops and no loop conversion unless no return type
o need packing-as and packing-in must take multiargs
o report ast-errors with line number
o def-opts and def-keys would be nice
o need the equiv of post for say !!!
o rename object-props to props-of
o programs as lsts is a terrible representation
o split out optimizations from ast-linearize
o doc or/set
o perhaps join should have a seq as second arg to make it sym with split
o stack overflow during recompilation
o boot: rename low primitives to have two %%'s
o boot: invent naming convention for compile time things say &...?
o fix emacs mode for [] and {}
o rename empty? to nul?
o macros should be compiled in interpreted
o automate release and build and test
o redo collection hierarchy
o   fix del-keys! and add protocol to enum for col!'s
o   no cat! met for vec
o   col doesn't work for <col.>'s 
o   change do-keyed and map-keyed to use items instead of keyed
o   perhaps *-or's should use thunks for default values
o   more tests
o   conform manual to test suite wrt collections
o send new version of shapes
o fix strutil
o customize wiki
o should [v *] == last?
o should [v 0 * 1] == [v 0 (- (len v) 1)]?
x don't deprecate 1st, 2nd, 3rd in favor of [] syntax ???
x merge in win32 patches
o   XCALL patches
o interfaces
o perhaps change ... to *
o publish reasons
o lighter weight c initialization %met etc
x line numbers
x read www.archub.org/arcsug.txt
o redo syntax to work declaratively
o add hygiene
o fix gensyms to be hidden
o report warnings as you go
o split grt functions to appropriate files
o function printing doesn't include nary arg
x condition hierarchy
o   restarts
o     unbound variables
o   import errors (namespace)
o   arithmetic errors
o   <name-error> ???
x split out runtime condition system
x add [] syntax?
x change port2str to port-to-str

OVERALL

NOW

x a bit more intro and status
x how to make vec/tup/str imm
x add load path
x x8r to eval
x lowercase filenames
x refer to talks
x finish converting talks
x put up goo website and update proto page
x export talks as pdf
x make x:y work during compilation mode
x <col!> <seq!>
x packer
x shorten dir names
x move runtime into goo
x add fun-val congruency checking
x add/rename del! in tab/goo
x change add/mem? for col/set
x move arity check to sig_val_type check
x port2str macro
use op
x get rid of format
exported -> pub
str port
split out boot and runtime
--
extend if
seq -> do
do  -> each or all
x get rid of collecting
report undefined bindings immediately after each module
x change printing to avoid extra ]'s

PROTO2GOO

THREADS

o handle dynamic variable overflows
o keyboard interrupts working
o handle any destroys necessary
o more thread control functions
x implement my own thread local storage (regs)
x   pass tlp in calling convention
x     allocate sp, fp, stack, stack_allocatep in tls
x   fix allocate, clone, FUNSHELL, NLX etc to take tlp
x   perhaps move next_methods register to tls as well
x access %fun through stack 
x changes
x   DEFREGS(); in all primitives

DISPATCH-TREES

o TEST
o   7sec with i+ inlined
o   8sec with + dec tree
o  10sec with + regular cache
o ground out dynamic compilation varref's
o MANUAL
o   add gen counters -- perhaps floating point
o   counting gen's during runtime (g2c execution)
o   compile 90 percentile
o PROFILE-GUIDED
o   gen counter overflow triggers compilation
o SAVE-IMAGE and then FIRST-CALLED
o   produce giant all dispatcher file compiled, loaded, saved
o   arrange for generic to compile its dispatcher when first called
o OPTIMIZATIONS
o   cse refs
o   pe  isa?

TYPE-INFERENCE

o TRACK GLOBAL ASSIGNMENTS
o METHOD TYPES
o FLOW SENSITIVE
o CPA

STATIC DISPATCH

o AST NODE FOR MET-CALL
o UPGRADE CALL

DYN-C 

o DEFINE NEW BINDINGS IN CODE
o LOOKUP IMPORTS THROUGH MODULE
o REFS THROUGH BINDING-BOXES

NATIVE CODE

o FIND OUT WHY IT INTERFERES WITH P2C
o TURN SPECIALS INTO CALLS
o CREATE STUB FOR CALLING VM USE FUN-VM SLOT
o GET VM FINISHED

CLASS

o CHANGE BOOTSTRAP TO MAKE CLASSES
o CHANGE ISA TO ALLOW ONLY ONE PARENT
o CHANGE ISA? TO BE THE REAL ONE
o NEED REAL-CLASS FOR REDEF
o FLATTEN OBJECTS
o CHANGE REDEF TO ERROR ON ACCESSING OBSOLETE OBJECTS

RTGC

o NEED SAFE GC POINTS
o NEED LIVE VARS
o REGISTER ROOTS
o NONINCREMENTAL TREADMILL 

HIGH -- SAFETY -- CORRECTNESS -- MIN FUNCTIONALITY

o NESTED MACROS FAIL `(mif (,',pattern))
x MAKE TUP'S READ-ONLY AND VECS
x TEST SUITE
x   CORE
o   LIBRARY
x TYPE-CHECK ISA SLOT INITS
o ERROR ON WRONG NUM ARGS TO INTERP FUN 
o MORE GENSYMS PLACES!!!
o DOC IS WRONG FOR ADD-SLOT -- NEED TO DM ACCESSORS

MEDIUM -- SPEED -- FUNCTIONALITY

o MAINTAIN SOURCE LOCATION
O REWRITE SYNTAX.PROTO AS MACROS FOR DECLARATIVE SPEC
o BIGNUMS
O NARY VERSIONS OF ARITH
o STACK OVERFLOW CHECK
o CLOSE OVER TYPES IN SIGNATURES
o FINISH TUP SUPPORT
O   ADD SET TUP SYNTAX
O   ADD DV TUP SYNTAX
O   LET TUP SHOULD DO PARALLEL BINDING THOUGH
o REDEFINITION
o   SEMANTICS WITHOUT DEFCLASS TYPE DEFS
x   ZERO PARAM CASE
o   CLASS REDEF DEALING WITH EXISTING METHODS
x NEXT-METHOD IS A BIG AND INCONSISTENT NAME 
o DOC port-line port-column
o ISA specially processes parents
o CLOSURE NAMES HAVE PARENTS
o BOUNDP on :: vars
o DDV not available to top level
o unbound variables crash system
x (newline) crashes (w/o port)
x (== x) crashes system
o DOC HEAD/TAIL-SETTER
o gen's get redefined with new method defs in p2c-eval
x (/ int flo) doesn't work
x (times n) for (from-below 0 n)
o DOC add-to-tmp
o PRINT LOC CORRECTLY &0x
o PRINT NUL CORRECTLY
x ADD LEN-SETTER TO DOC
x (DEF-SLOT ?name ((?var ?class) => ?type) ?@body)
x (ISA ?type ?@init-args)
x DOC OPF, ADD!
o DOC LOW-ELT(-SETTER)
o REP XEP'S GENERATED
o CALL-C MECHANISM
o WRAP DYNAMIC VAR ACCESSES WITH DYN
x RENAME LAB TO ESC
o IMPROVE P2C
O   DON'T OUTPUT SHADOW REGISTERS / LOOP: UNLESS USED
o   TIE REGISTERS BETWEEN NESTED PROGRAMS
o   REUSE REGISTERS IN SIBLING COMPUTATIONS
o NAMES IN TRAITS
x REMOVE SIZE FROM OBJECT VALUES (SHOULD BE IN TRAITS)
o C-D NOT WORKING
o INLINE SLOTS -- HARD WITH (SLOT ...)
o DEBUGGABLE INTERPRETER
o   GOOD ERRORS
o     CONDITIONS FOR DISPATCH/FUNCALL PROBLEMS
o       ADDING METHOD TO FUNCTION
x       INCONGRUENCY
O       WRONG NUMBER ARGS SHOULD BE REAL CONDITION
x   RESTARTS
o   BACKTRACE
o     FOR C 
o     FOR EVAL
o INSPECTOR
x NARY APPLY 
o LAMBDA-LIFTING
o MAKE ENV A MAP
o REPEATED SLOTS
O MERGE AST-LINEARIZE INTO AST
o FASTER CALL
o USE ELSE AS #T IN CASE AND SELECT
o ADD RECURRING FORMAT
o HANDLE CHANGE CLASS
o   TRACK METHODS
x CHANGE FROM (ISA (PARENT ...) (SET GETTER VALUE) ...) TO GETTER VALUE ...
x MON SHOULD BE MORE LIKE LOC TAKING FUN PARAMS
o   CHANGE SIG TO SEARCH FOR APPLICABLE TRY
x ELT-OR AS UNDERLYING SUBSTRATE
x   ELT CALLS ELT-OR WITH $unsupplied
o PRIMITIVES SHOULD HAVE TYPES IN COMPILER
o NEED COMPILATION/RUNTIME-CONTEXT OBJECTS
x ISA CAN'T BE A MACRO CAUSE NEEDS TO BE CALLED
x SHOULD BE ADD-FIRST AND ADD-LAST
x PUSH AND POP MIGHT BE BETTER AS MACROS FOR WRITE BACK
x   THEY DON'T CURRENTLY WORK FOR LISTS
o CHANGE SIF FORMAT TO TAKE FOUR ARGS ???
O USE UPPERCASE FOR TYPES? INT VS <INT> 
x MULTI-COLLECTIONS
x COLLECTING MACRO
x   WITH PROTOCOL
o GENERIC FUNCTIONS???
o RECONCILE COLLECTION LIB WITH COOK PAPER
o INFIX -> PREFIX CONVERTER LIKE TAGS
o UNNAMED ARGUMENTS WITH _
o FFI
x MAKE PROTOCOL 
o   COLLECTIONS
x   CAN I OVERRIDE ISA?
x DON'T ALLOW DOT READING
o DON'T CONS TRAITS UNLESS YOU DIFFER FROM PARENT

LOW

o OUTPUT-PORT -> OUT-PORT ETC
o WRITE WYSIWYG FIP
o WRITE WYSIWYG CURRY
x ADD FALSE-OR
x ADD TYPE-OR
o CHANGE NAME OF MAKE-SYM TO FAB-SYM OR MAYBE CAT-SYM
o CLASS-BASED VERSION
o BIND "IT" TO TEST
o USE FIP MORE AND DEPRECATE DEPENDENCE ON LISTS
o WRITE CALL ROUTINES IN PROTO
o MERGE SYNTAX INTO AST GETTING RID OF ALL THE SYNTAX FUNS USING DESTRUCTING
o AUTO GEN SEXPR-COMPILE-TIME-TAGS
o GET RID OF MACRO VAR DEFS EMITTED IN C FILE
o METHODS SHOULD BE TRACEABLE BACK TO GENERIC
o CHANGE ISA SYNTAX TO REMOVE (SET ,name ,value)'s in favor of ,name ,value
o REWRITE from-*-* using macro
o WHAT ABOUT KEY-VALUE ITERATION IN FOR LOOP? (USE TUP)
o MULTIPLE VALUES
  (def block 
    (macro ((block ?name ?form ...) env)
     (call/cc (fun (?name) ?form ...))))
  (def (values (objects ...)) 
    (block return (apply return objects)))
  (def (call-with-values producer consumer) ...)
o UNICODE
o MERGE IN SERIES OPERATORS
o CHANGE LIST TO BE VECTOR?
o FORWARD REFERENCES
o SLOTS SHOULD USE ACCESSORS AS KEYS
o PREDICATE TYPES
o CLASS NAMING CONVENTION
o USE PAT VARS IN FORMAT STRINGS
o ASYMMETRY BETWEEN DEFINE AND LOC WRT PARAMS ((FUN x y) ?body)
   (DEF (F A B) BODY)
   (LOC (((F A B) BODY) ...) BODY)
   (LET ((X EXP) ...) BODY)
o MOP
o THUNK ABBREVIATION [ form ... ] => (fun () form ...)
o GET RID OF CONTROL FORMS USING THUNKS INSTEAD?
    (def (if #f con alt) (alt)) (if x [(go)] [(stop)])
    (def (if t  con alt) (con))

It seems stange to me that Dylan has every? and any?, but not count, 
given that every? and any? can both be efficiently created from count, 
as count(coll, pred) >= 1  and  count(coll, pred) = coll.size.  Well, 
OK, perhaps every? and any? are better to have an early-out 
implementaion, but I certainly don't see how they are any more primitive 
than count().

TABLES

;;--- To-do:
;;--- Bugs:
;;---   GC-state is not taken into account.  Adding a macro that wraps
;;---     up key-searching would help organize this.
;;--- Performance:
;;---   Finish (hopefully) better hashing functions for both \== and \=.
;;---   Make a subclass for \= tables that inlines the test and hash functions.
;;---     Should we do this for \= and \== tables?
;;---   Remove "below" tests when looping through tables since we provably
;;---     must hit an empty or evacuated cell sometime.
;;---   We don't currently need to lock table during rehash because we always
;;---     create a new vector.  This is very inefficient when we are doing a
;;---     same-size rehash on behalf of the GC.  Can we do better?
;;---     except that a puthash might get lost
;;---   Another way to decide to rehash a table might be on the basis of having
;;---     collision chains that are "too long".
;;---   Rehashing a table should consider the collision chain as it rehashes.
;;---     That is when an object A is hashed to it's preferred place in the
;;---     table and there is already an object B there due to secondary 
;;---     hashing then object B should be removed to some other place in its 
;;---     collision chain.  This means that object A will end up in its 
;;---     preferred place and object B won't be much worse off.
;;---   When removing the last key in a bucket in 'remhash' it can be marked
;;---     as empty instead of vacated.
;;--- Extensions:
;;---   Implement set (0-valued) tables.


